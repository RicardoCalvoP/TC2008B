{
  "version": 3,
  "sources": ["../../twgl-base.js/dist/5.x/twgl.module.js"],
  "sourcesContent": ["/* @license twgl.js 5.5.3 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\r\nAvailable via the MIT license.\r\nsee: http://github.com/greggman/twgl.js for details */\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/* DataType */\r\nconst BYTE$2                           = 0x1400;\r\nconst UNSIGNED_BYTE$3                  = 0x1401;\r\nconst SHORT$2                          = 0x1402;\r\nconst UNSIGNED_SHORT$3                 = 0x1403;\r\nconst INT$3                            = 0x1404;\r\nconst UNSIGNED_INT$3                   = 0x1405;\r\nconst FLOAT$3                          = 0x1406;\r\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\r\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\r\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\r\nconst HALF_FLOAT$1                   = 0x140B;\r\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\r\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\r\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\r\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\r\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\r\n\r\nconst glTypeToTypedArray = {};\r\n{\r\n  const tt = glTypeToTypedArray;\r\n  tt[BYTE$2]                           = Int8Array;\r\n  tt[UNSIGNED_BYTE$3]                  = Uint8Array;\r\n  tt[SHORT$2]                          = Int16Array;\r\n  tt[UNSIGNED_SHORT$3]                 = Uint16Array;\r\n  tt[INT$3]                            = Int32Array;\r\n  tt[UNSIGNED_INT$3]                   = Uint32Array;\r\n  tt[FLOAT$3]                          = Float32Array;\r\n  tt[UNSIGNED_SHORT_4_4_4_4$1]         = Uint16Array;\r\n  tt[UNSIGNED_SHORT_5_5_5_1$1]         = Uint16Array;\r\n  tt[UNSIGNED_SHORT_5_6_5$1]           = Uint16Array;\r\n  tt[HALF_FLOAT$1]                     = Uint16Array;\r\n  tt[UNSIGNED_INT_2_10_10_10_REV$1]    = Uint32Array;\r\n  tt[UNSIGNED_INT_10F_11F_11F_REV$1]   = Uint32Array;\r\n  tt[UNSIGNED_INT_5_9_9_9_REV$1]       = Uint32Array;\r\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\r\n  tt[UNSIGNED_INT_24_8$1]              = Uint32Array;\r\n}\r\n\r\n/**\r\n * Get the GL type for a typedArray\r\n * @param {ArrayBufferView} typedArray a typedArray\r\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\r\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\r\n * @memberOf module:twgl/typedArray\r\n */\r\nfunction getGLTypeForTypedArray(typedArray) {\r\n  if (typedArray instanceof Int8Array)         { return BYTE$2; }           // eslint-disable-line\r\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\r\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\r\n  if (typedArray instanceof Int16Array)        { return SHORT$2; }          // eslint-disable-line\r\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\r\n  if (typedArray instanceof Int32Array)        { return INT$3; }            // eslint-disable-line\r\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\r\n  if (typedArray instanceof Float32Array)      { return FLOAT$3; }          // eslint-disable-line\r\n  throw new Error('unsupported typed array type');\r\n}\r\n\r\n/**\r\n * Get the GL type for a typedArray type\r\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\r\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\r\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\r\n * @memberOf module:twgl/typedArray\r\n */\r\nfunction getGLTypeForTypedArrayType(typedArrayType) {\r\n  if (typedArrayType === Int8Array)         { return BYTE$2; }           // eslint-disable-line\r\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\r\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\r\n  if (typedArrayType === Int16Array)        { return SHORT$2; }          // eslint-disable-line\r\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\r\n  if (typedArrayType === Int32Array)        { return INT$3; }            // eslint-disable-line\r\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\r\n  if (typedArrayType === Float32Array)      { return FLOAT$3; }          // eslint-disable-line\r\n  throw new Error('unsupported typed array type');\r\n}\r\n\r\n/**\r\n * Get the typed array constructor for a given GL type\r\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\r\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\r\n * @memberOf module:twgl/typedArray\r\n */\r\nfunction getTypedArrayTypeForGLType(type) {\r\n  const CTOR = glTypeToTypedArray[type];\r\n  if (!CTOR) {\r\n    throw new Error('unknown gl type');\r\n  }\r\n  return CTOR;\r\n}\r\n\r\nconst isArrayBuffer$1 = typeof SharedArrayBuffer !== 'undefined'\r\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\r\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\r\n  }\r\n  : function isArrayBuffer(a) {\r\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\r\n  };\r\n\r\nvar typedarrays = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\r\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\r\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\r\n  isArrayBuffer: isArrayBuffer$1\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Copies properties from source to dest only if a matching key is in dest\r\n *\r\n * @param {Object.<string, ?>} src the source\r\n * @param {Object.<string, ?>} dst the dest\r\n * @private\r\n */\r\nfunction copyExistingProperties(src, dst) {\r\n  Object.keys(dst).forEach(function(key) {\r\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\r\n      dst[key] = src[key];\r\n    }\r\n  });\r\n}\r\n\r\nfunction error$1(...args) {\r\n  console.error(...args);\r\n}\r\n\r\nfunction warn$1(...args) {\r\n  console.warn(...args);\r\n}\r\n\r\nconst isTypeWeakMaps = new Map();\r\n\r\nfunction isType(object, type) {\r\n  if (!object || typeof object !== 'object') {\r\n    return false;\r\n  }\r\n  let weakMap = isTypeWeakMaps.get(type);\r\n  if (!weakMap) {\r\n    weakMap = new WeakMap();\r\n    isTypeWeakMaps.set(type, weakMap);\r\n  }\r\n  let isOfType = weakMap.get(object);\r\n  if (isOfType === undefined) {\r\n    const s = Object.prototype.toString.call(object);\r\n    isOfType = s.substring(8, s.length - 1) === type;\r\n    weakMap.set(object, isOfType);\r\n  }\r\n  return isOfType;\r\n}\r\n\r\nfunction isBuffer(gl, t) {\r\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\r\n}\r\n\r\nfunction isRenderbuffer(gl, t) {\r\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\r\n}\r\n\r\nfunction isTexture(gl, t) {\r\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\r\n}\r\n\r\nfunction isSampler(gl, t) {\r\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\r\n}\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nconst STATIC_DRAW                  = 0x88e4;\r\nconst ARRAY_BUFFER$1                 = 0x8892;\r\nconst ELEMENT_ARRAY_BUFFER$2         = 0x8893;\r\nconst BUFFER_SIZE                  = 0x8764;\r\n\r\nconst BYTE$1                         = 0x1400;\r\nconst UNSIGNED_BYTE$2                = 0x1401;\r\nconst SHORT$1                        = 0x1402;\r\nconst UNSIGNED_SHORT$2               = 0x1403;\r\nconst INT$2                          = 0x1404;\r\nconst UNSIGNED_INT$2                 = 0x1405;\r\nconst FLOAT$2                        = 0x1406;\r\nconst defaults$2 = {\r\n  attribPrefix: \"\",\r\n};\r\n\r\n/**\r\n * Sets the default attrib prefix\r\n *\r\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\r\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\r\n *\r\n * In other words I'll create arrays of geometry like this\r\n *\r\n *     var arrays = {\r\n *       position: ...\r\n *       normal: ...\r\n *       texcoord: ...\r\n *     };\r\n *\r\n * But need those mapped to attributes and my attributes start with `a_`.\r\n *\r\n * @deprecated see {@link module:twgl.setDefaults}\r\n * @param {string} prefix prefix for attribs\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction setAttributePrefix(prefix) {\r\n  defaults$2.attribPrefix = prefix;\r\n}\r\n\r\nfunction setDefaults$2(newDefaults) {\r\n  copyExistingProperties(newDefaults, defaults$2);\r\n}\r\n\r\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\r\n  gl.bindBuffer(type, buffer);\r\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\r\n}\r\n\r\n/**\r\n * Given typed array creates a WebGLBuffer and copies the typed array\r\n * into it.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\r\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\r\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\r\n * @return {WebGLBuffer} the created WebGLBuffer\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\r\n  if (isBuffer(gl, typedArray)) {\r\n    return typedArray;\r\n  }\r\n  type = type || ARRAY_BUFFER$1;\r\n  const buffer = gl.createBuffer();\r\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\r\n  return buffer;\r\n}\r\n\r\nfunction isIndices(name) {\r\n  return name === \"indices\";\r\n}\r\n\r\n// This is really just a guess. Though I can't really imagine using\r\n// anything else? Maybe for some compression?\r\nfunction getNormalizationForTypedArrayType(typedArrayType) {\r\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\r\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\r\n  return false;\r\n}\r\n\r\nfunction getArray(array) {\r\n  return array.length ? array : array.data;\r\n}\r\n\r\nconst texcoordRE = /coord|texture/i;\r\nconst colorRE = /color|colour/i;\r\n\r\nfunction guessNumComponentsFromName(name, length) {\r\n  let numComponents;\r\n  if (texcoordRE.test(name)) {\r\n    numComponents = 2;\r\n  } else if (colorRE.test(name)) {\r\n    numComponents = 4;\r\n  } else {\r\n    numComponents = 3;  // position, normals, indices ...\r\n  }\r\n\r\n  if (length % numComponents > 0) {\r\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\r\n  }\r\n\r\n  return numComponents;\r\n}\r\n\r\nfunction getNumComponents(array, arrayName, numValues) {\r\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray(array).length);\r\n}\r\n\r\nfunction makeTypedArray(array, name) {\r\n  if (isArrayBuffer$1(array)) {\r\n    return array;\r\n  }\r\n\r\n  if (isArrayBuffer$1(array.data)) {\r\n    return array.data;\r\n  }\r\n\r\n  if (Array.isArray(array)) {\r\n    array = {\r\n      data: array,\r\n    };\r\n  }\r\n\r\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\r\n  if (!Type) {\r\n    if (isIndices(name)) {\r\n      Type = Uint16Array;\r\n    } else {\r\n      Type = Float32Array;\r\n    }\r\n  }\r\n  return new Type(array.data);\r\n}\r\n\r\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\r\n  return typeof glTypeOrTypedArrayCtor === 'number'\r\n      ? glTypeOrTypedArrayCtor\r\n      : glTypeOrTypedArrayCtor ? getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT$2;\r\n}\r\n\r\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\r\n  return typeof glTypeOrTypedArrayCtor === 'number'\r\n      ? getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\r\n      : glTypeOrTypedArrayCtor || Float32Array;\r\n}\r\n\r\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\r\n  return {\r\n    buffer: array.buffer,\r\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\r\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\r\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\r\n  };\r\n}\r\n\r\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\r\n  const numValues = array.data || array;\r\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\r\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\r\n  const buffer = gl.createBuffer();\r\n  gl.bindBuffer(ARRAY_BUFFER$1, buffer);\r\n  gl.bufferData(ARRAY_BUFFER$1, numBytes, array.drawType || STATIC_DRAW);\r\n  return {\r\n    buffer,\r\n    numValues,\r\n    type: getGLTypeForTypedArrayType(arrayType),\r\n    arrayType,\r\n  };\r\n}\r\n\r\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\r\n  const typedArray = makeTypedArray(array, arrayName);\r\n  return {\r\n    arrayType: typedArray.constructor,\r\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\r\n    type: getGLTypeForTypedArray(typedArray),\r\n    numValues: 0,\r\n  };\r\n}\r\n\r\n/**\r\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\r\n * for the attribute.\r\n *\r\n * @typedef {Object} AttribInfo\r\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\r\n *    disabled and set to this constant value and all other values will be ignored.\r\n * @property {number} [numComponents] the number of components for this attribute.\r\n * @property {number} [size] synonym for `numComponents`.\r\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\r\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\r\n * @property {number} [offset] offset into buffer in bytes. Default = 0\r\n * @property {number} [stride] the stride in bytes per element. Default = 0\r\n * @property {number} [divisor] the divisor in instances. Default = 0.\r\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\r\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\r\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\r\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\r\n */\r\n\r\n/**\r\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\r\n * @typedef {Object} FullArraySpec\r\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\r\n *    disabled and set to this constant value and all other values will be ignored.\r\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\r\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\r\n *    If `coord` is in the name assumes `numComponents = 2`.\r\n *    If `color` is in the name assumes `numComponents = 4`.\r\n *    otherwise assumes `numComponents = 3`\r\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\r\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\r\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\r\n * @property {number} [size] synonym for `numComponents`.\r\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\r\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\r\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\r\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\r\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\r\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\r\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\r\n * @property {string} [name] synonym for `attrib`.\r\n * @property {string} [attribName] synonym for `attrib`.\r\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\r\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\r\n *    to provide this. Example:\r\n *\r\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\r\n *           position: [1, 2, 3, ... ],\r\n *         });\r\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\r\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\r\n *         });\r\n *\r\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * An individual array in {@link module:twgl.Arrays}\r\n *\r\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\r\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\r\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\r\n *\r\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\r\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\r\n *\r\n *     Bare JavaScript Arrays\r\n *\r\n *         var arrays = {\r\n *            position: [-1, 1, 0],\r\n *            normal: [0, 1, 0],\r\n *            ...\r\n *         }\r\n *\r\n *     Bare TypedArrays\r\n *\r\n *         var arrays = {\r\n *            position: new Float32Array([-1, 1, 0]),\r\n *            color: new Uint8Array([255, 128, 64, 255]),\r\n *            ...\r\n *         }\r\n *\r\n * *   Will guess at `numComponents` if not specified based on name.\r\n *\r\n *     If `coord` is in the name assumes `numComponents = 2`\r\n *\r\n *     If `color` is in the name assumes `numComponents = 4`\r\n *\r\n *     otherwise assumes `numComponents = 3`\r\n *\r\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\r\n *\r\n *     var arrays = {\r\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\r\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\r\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\r\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\r\n *     };\r\n *\r\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\r\n * @memberOf module:twgl\r\n */\r\n\r\n\r\n/**\r\n * Creates a set of attribute data and WebGLBuffers from set of arrays\r\n *\r\n * Given\r\n *\r\n *      var arrays = {\r\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\r\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\r\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\r\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\r\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\r\n *      };\r\n *\r\n * returns something like\r\n *\r\n *      var attribs = {\r\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\r\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\r\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\r\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\r\n *      };\r\n *\r\n * notes:\r\n *\r\n * *   Arrays can take various forms\r\n *\r\n *     Bare JavaScript Arrays\r\n *\r\n *         var arrays = {\r\n *            position: [-1, 1, 0],\r\n *            normal: [0, 1, 0],\r\n *            ...\r\n *         }\r\n *\r\n *     Bare TypedArrays\r\n *\r\n *         var arrays = {\r\n *            position: new Float32Array([-1, 1, 0]),\r\n *            color: new Uint8Array([255, 128, 64, 255]),\r\n *            ...\r\n *         }\r\n *\r\n * *   Will guess at `numComponents` if not specified based on name.\r\n *\r\n *     If `coord` is in the name assumes `numComponents = 2`\r\n *\r\n *     If `color` is in the name assumes `numComponents = 4`\r\n *\r\n *     otherwise assumes `numComponents = 3`\r\n *\r\n * @param {WebGLRenderingContext} gl The webgl rendering context.\r\n * @param {module:twgl.Arrays} arrays The arrays\r\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\r\n *   This lets you share buffers. Any arrays you supply will override\r\n *   the buffers from srcBufferInfo.\r\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction createAttribsFromArrays(gl, arrays) {\r\n  const attribs = {};\r\n  Object.keys(arrays).forEach(function(arrayName) {\r\n    if (!isIndices(arrayName)) {\r\n      const array = arrays[arrayName];\r\n      const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);\r\n      if (array.value) {\r\n        if (!Array.isArray(array.value) && !isArrayBuffer$1(array.value)) {\r\n          throw new Error('array.value is not array or typedarray');\r\n        }\r\n        attribs[attribName] = {\r\n          value: array.value,\r\n        };\r\n      } else {\r\n        let fn;\r\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\r\n          fn = attribBufferFromBuffer;\r\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\r\n          fn = attribBufferFromSize;\r\n        } else {\r\n          fn = attribBufferFromArrayLike;\r\n        }\r\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\r\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\r\n        const numComponents = getNumComponents(array, arrayName, numValues);\r\n        attribs[attribName] = {\r\n          buffer:        buffer,\r\n          numComponents: numComponents,\r\n          type:          type,\r\n          normalize:     normalization,\r\n          stride:        array.stride || 0,\r\n          offset:        array.offset || 0,\r\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\r\n          drawType:      array.drawType,\r\n        };\r\n      }\r\n    }\r\n  });\r\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\r\n  return attribs;\r\n}\r\n\r\n/**\r\n * Sets the contents of a buffer attached to an attribInfo\r\n *\r\n * This is helper function to dynamically update a buffer.\r\n *\r\n * Let's say you make a bufferInfo\r\n *\r\n *     var arrays = {\r\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\r\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\r\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\r\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\r\n *     };\r\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\r\n *\r\n *  And you want to dynamically update the positions. You could do this\r\n *\r\n *     // assuming arrays.position has already been updated with new data.\r\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\r\n *\r\n * @param {WebGLRenderingContext} gl\r\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\r\n *   the name of the attribute will include the prefix.\r\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\r\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\r\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\r\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\r\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\r\n *    for the portion of the array you want to use.\r\n *\r\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\r\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\r\n *\r\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\r\n  array = makeTypedArray(array);\r\n  if (offset !== undefined) {\r\n    gl.bindBuffer(ARRAY_BUFFER$1, attribInfo.buffer);\r\n    gl.bufferSubData(ARRAY_BUFFER$1, offset, array);\r\n  } else {\r\n    setBufferFromTypedArray(gl, ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\r\n  }\r\n}\r\n\r\nfunction getBytesPerValueForGLType(gl, type) {\r\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\r\n  if (type === UNSIGNED_BYTE$2)  return 1;  // eslint-disable-line\r\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\r\n  if (type === UNSIGNED_SHORT$2) return 2;  // eslint-disable-line\r\n  if (type === INT$2)            return 4;  // eslint-disable-line\r\n  if (type === UNSIGNED_INT$2)   return 4;  // eslint-disable-line\r\n  if (type === FLOAT$2)          return 4;  // eslint-disable-line\r\n  return 0;\r\n}\r\n\r\n// Tries to get the number of elements from a set of arrays.\r\nconst positionKeys = ['position', 'positions', 'a_position'];\r\nfunction getNumElementsFromNonIndexedArrays(arrays) {\r\n  let key;\r\n  let ii;\r\n  for (ii = 0; ii < positionKeys.length; ++ii) {\r\n    key = positionKeys[ii];\r\n    if (key in arrays) {\r\n      break;\r\n    }\r\n  }\r\n  if (ii === positionKeys.length) {\r\n    key = Object.keys(arrays)[0];\r\n  }\r\n  const array = arrays[key];\r\n  const length = getArray(array).length;\r\n  if (length === undefined) {\r\n    return 1;   // There's no arrays\r\n  }\r\n  const numComponents = getNumComponents(array, key);\r\n  const numElements = length / numComponents;\r\n  if (length % numComponents > 0) {\r\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\r\n  }\r\n  return numElements;\r\n}\r\n\r\nfunction getNumElementsFromAttributes(gl, attribs) {\r\n  let key;\r\n  let ii;\r\n  for (ii = 0; ii < positionKeys.length; ++ii) {\r\n    key = positionKeys[ii];\r\n    if (key in attribs) {\r\n      break;\r\n    }\r\n    key = defaults$2.attribPrefix + key;\r\n    if (key in attribs) {\r\n      break;\r\n    }\r\n  }\r\n  if (ii === positionKeys.length) {\r\n    key = Object.keys(attribs)[0];\r\n  }\r\n  const attrib = attribs[key];\r\n  if (!attrib.buffer) {\r\n    return 1; // There's no buffer\r\n  }\r\n  gl.bindBuffer(ARRAY_BUFFER$1, attrib.buffer);\r\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER$1, BUFFER_SIZE);\r\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\r\n\r\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\r\n  const totalElements = numBytes / bytesPerValue;\r\n  const numComponents = attrib.numComponents || attrib.size;\r\n  // TODO: check stride\r\n  const numElements = totalElements / numComponents;\r\n  if (numElements % 1 !== 0) {\r\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\r\n  }\r\n  return numElements;\r\n}\r\n\r\n/**\r\n * @typedef {Object} BufferInfo\r\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\r\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\r\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\r\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a BufferInfo from an object of arrays.\r\n *\r\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\r\n * {@link module:twgl:drawBufferInfo}.\r\n *\r\n * Given an object like\r\n *\r\n *     var arrays = {\r\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\r\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\r\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\r\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\r\n *     };\r\n *\r\n *  Creates an BufferInfo like this\r\n *\r\n *     bufferInfo = {\r\n *       numElements: 4,        // or whatever the number of elements is\r\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\r\n *       attribs: {\r\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\r\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\r\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\r\n *       },\r\n *     };\r\n *\r\n *  The properties of arrays can be JavaScript arrays in which case the number of components\r\n *  will be guessed.\r\n *\r\n *     var arrays = {\r\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\r\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\r\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n *        indices:  [0, 1, 2, 1, 2, 3],\r\n *     };\r\n *\r\n *  They can also be TypedArrays\r\n *\r\n *     var arrays = {\r\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\r\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\r\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\r\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\r\n *     };\r\n *\r\n *  Or AugmentedTypedArrays\r\n *\r\n *     var positions = createAugmentedTypedArray(3, 4);\r\n *     var texcoords = createAugmentedTypedArray(2, 4);\r\n *     var normals   = createAugmentedTypedArray(3, 4);\r\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\r\n *\r\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\r\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\r\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\r\n *     indices.push([0, 1, 2, 1, 2, 3]);\r\n *\r\n *     var arrays = {\r\n *        position: positions,\r\n *        texcoord: texcoords,\r\n *        normal:   normals,\r\n *        indices:  indices,\r\n *     };\r\n *\r\n * For the last example it is equivalent to\r\n *\r\n *     var bufferInfo = {\r\n *       attribs: {\r\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\r\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\r\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\r\n *       },\r\n *       indices: gl.createBuffer(),\r\n *       numElements: 6,\r\n *     };\r\n *\r\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\r\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\r\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\r\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\r\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\r\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\r\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\r\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {module:twgl.Arrays} arrays Your data\r\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\r\n *        buffer info to start from. WebGLBuffers etc specified\r\n *        in the srcBufferInfo will be used in a new BufferInfo\r\n *        with any arrays specified overriding the ones in\r\n *        srcBufferInfo.\r\n * @return {module:twgl.BufferInfo} A BufferInfo\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\r\n  const newAttribs = createAttribsFromArrays(gl, arrays);\r\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\r\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\r\n  const indices = arrays.indices;\r\n  if (indices) {\r\n    const newIndices = makeTypedArray(indices, \"indices\");\r\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER$2);\r\n    bufferInfo.numElements = newIndices.length;\r\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\r\n  } else if (!bufferInfo.numElements) {\r\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\r\n  }\r\n\r\n  return bufferInfo;\r\n}\r\n\r\n/**\r\n * Creates a buffer from an array, typed array, or array spec\r\n *\r\n * Given something like this\r\n *\r\n *     [1, 2, 3],\r\n *\r\n * or\r\n *\r\n *     new Uint16Array([1,2,3]);\r\n *\r\n * or\r\n *\r\n *     {\r\n *        data: [1, 2, 3],\r\n *        type: Uint8Array,\r\n *     }\r\n *\r\n * returns a WebGLBuffer that contains the given data.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\r\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\r\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\r\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction createBufferFromArray(gl, array, arrayName) {\r\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER$2 : ARRAY_BUFFER$1;\r\n  const typedArray = makeTypedArray(array, arrayName);\r\n  return createBufferFromTypedArray(gl, typedArray, type);\r\n}\r\n\r\n/**\r\n * Creates buffers from arrays or typed arrays\r\n *\r\n * Given something like this\r\n *\r\n *     var arrays = {\r\n *        positions: [1, 2, 3],\r\n *        normals: [0, 0, 1],\r\n *     }\r\n *\r\n * returns something like\r\n *\r\n *     buffers = {\r\n *       positions: WebGLBuffer,\r\n *       normals: WebGLBuffer,\r\n *     }\r\n *\r\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\r\n * @param {module:twgl.Arrays} arrays\r\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\r\n * @memberOf module:twgl/attributes\r\n */\r\nfunction createBuffersFromArrays(gl, arrays) {\r\n  const buffers = { };\r\n  Object.keys(arrays).forEach(function(key) {\r\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\r\n  });\r\n\r\n  // Ugh!\r\n  if (arrays.indices) {\r\n    buffers.numElements = arrays.indices.length;\r\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\r\n  } else {\r\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\r\n  }\r\n\r\n  return buffers;\r\n}\r\n\r\nvar attributes = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  createAttribsFromArrays: createAttribsFromArrays,\r\n  createBuffersFromArrays: createBuffersFromArrays,\r\n  createBufferFromArray: createBufferFromArray,\r\n  createBufferFromTypedArray: createBufferFromTypedArray,\r\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\r\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\r\n  setAttributePrefix: setAttributePrefix,\r\n  setAttributeDefaults_: setDefaults$2,\r\n  getNumComponents_: getNumComponents,\r\n  getArray_: getArray\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Gets the gl version as a number\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @return {number} version of gl\r\n * @private\r\n */\r\n//function getVersionAsNumber(gl) {\r\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\r\n//}\r\n\r\n/**\r\n * Check if context is WebGL 2.0\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @return {bool} true if it's WebGL 2.0\r\n * @memberOf module:twgl\r\n */\r\nfunction isWebGL2(gl) {\r\n  // This is the correct check but it's slow\r\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\r\n  // This might also be the correct check but I'm assuming it's slow-ish\r\n  // return gl instanceof WebGL2RenderingContext;\r\n  return !!gl.texStorage2D;\r\n}\r\n\r\n/**\r\n * Check if context is WebGL 1.0\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @return {bool} true if it's WebGL 1.0\r\n * @memberOf module:twgl\r\n */\r\nfunction isWebGL1(gl) {\r\n  // This is the correct check but it's slow\r\n  // const version = getVersionAsNumber(gl);\r\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\r\n  // This might also be the correct check but I'm assuming it's slow-ish\r\n  // return gl instanceof WebGLRenderingContext;\r\n  return !gl.texStorage2D;\r\n}\r\n\r\n/**\r\n * Gets a string for WebGL enum\r\n *\r\n * Note: Several enums are the same. Without more\r\n * context (which function) it's impossible to always\r\n * give the correct enum. As it is, for matching values\r\n * it gives all enums. Checking the WebGL2RenderingContext\r\n * that means\r\n *\r\n *      0     = ZERO | POINT | NONE | NO_ERROR\r\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\r\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\r\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\r\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\r\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\r\n *\r\n * It's also not useful for bits really unless you pass in individual bits.\r\n * In other words\r\n *\r\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\r\n *     twgl.glEnumToString(gl, bits);  // not going to work\r\n *\r\n * Note that some enums only exist on extensions. If you\r\n * want them to show up you need to pass the extension at least\r\n * once. For example\r\n *\r\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\r\n *     if (ext) {\r\n *        twgl.glEnumToString(ext, 0);  // just prime the function\r\n *\r\n *        ..later..\r\n *\r\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n *        console.log(twgl.glEnumToString(gl, internalFormat));\r\n *\r\n * Notice I didn't have to pass the extension the second time. This means\r\n * you can have place that generically gets an enum for texture formats for example.\r\n * and as long as you primed the function with the extensions\r\n *\r\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\r\n * then twgl will automatically get the extension's enums.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\r\n * @param {number} value the value of the enum you want to look up.\r\n * @return {string} enum string or hex value\r\n * @memberOf module:twgl\r\n * @function glEnumToString\r\n */\r\nconst glEnumToString = (function() {\r\n  const haveEnumsForType = {};\r\n  const enums = {};\r\n\r\n  function addEnums(gl) {\r\n    const type = gl.constructor.name;\r\n    if (!haveEnumsForType[type]) {\r\n      for (const key in gl) {\r\n        if (typeof gl[key] === 'number') {\r\n          const existing = enums[gl[key]];\r\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\r\n        }\r\n      }\r\n      haveEnumsForType[type] = true;\r\n    }\r\n  }\r\n\r\n  return function glEnumToString(gl, value) {\r\n    addEnums(gl);\r\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\r\n  };\r\n}());\r\n\r\nvar utils = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  glEnumToString: glEnumToString,\r\n  isWebGL1: isWebGL1,\r\n  isWebGL2: isWebGL2\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\nconst defaults$1 = {\r\n  textureColor: new Uint8Array([128, 192, 255, 255]),\r\n  textureOptions: {},\r\n  crossOrigin: undefined,\r\n};\r\nconst isArrayBuffer = isArrayBuffer$1;\r\n\r\n// Should we make this on demand?\r\nconst getShared2DContext = function() {\r\n  let s_ctx;\r\n  return function getShared2DContext() {\r\n    s_ctx = s_ctx ||\r\n        ((typeof document !== 'undefined' && document.createElement)\r\n          ? document.createElement(\"canvas\").getContext(\"2d\")\r\n          : null);\r\n    return s_ctx;\r\n  };\r\n}();\r\n\r\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\r\n//       not only does Firefox NOT support it but Firefox freezes immediately\r\n//       if you try to create one instead of just returning null and continuing.\r\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\r\n\r\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\r\n// we can use the various unpack settings. Otherwise we could try using\r\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\r\n// is async and the current TWGL code expects a non-Async result though that\r\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\r\n// as of 2018-01-02\r\n\r\n/* PixelFormat */\r\nconst ALPHA                          = 0x1906;\r\nconst RGB                            = 0x1907;\r\nconst RGBA$1                           = 0x1908;\r\nconst LUMINANCE                      = 0x1909;\r\nconst LUMINANCE_ALPHA                = 0x190A;\r\nconst DEPTH_COMPONENT$1                = 0x1902;\r\nconst DEPTH_STENCIL$1                  = 0x84F9;\r\n\r\n/* TextureWrapMode */\r\n// const REPEAT                         = 0x2901;\r\n// const MIRRORED_REPEAT                = 0x8370;\r\nconst CLAMP_TO_EDGE$1                  = 0x812f;\r\n\r\n/* TextureMagFilter */\r\nconst NEAREST                        = 0x2600;\r\nconst LINEAR$1                         = 0x2601;\r\n\r\n/* TextureMinFilter */\r\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\r\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\r\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\r\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\r\n\r\n/* Texture Target */\r\nconst TEXTURE_2D$2                     = 0x0de1;\r\nconst TEXTURE_CUBE_MAP$1               = 0x8513;\r\nconst TEXTURE_3D$1                     = 0x806f;\r\nconst TEXTURE_2D_ARRAY$1               = 0x8c1a;\r\n\r\n/* Cubemap Targets */\r\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\r\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\r\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\r\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\r\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\r\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\r\n\r\n/* Texture Parameters */\r\nconst TEXTURE_MIN_FILTER             = 0x2801;\r\nconst TEXTURE_MAG_FILTER             = 0x2800;\r\nconst TEXTURE_WRAP_S                 = 0x2802;\r\nconst TEXTURE_WRAP_T                 = 0x2803;\r\nconst TEXTURE_WRAP_R                 = 0x8072;\r\nconst TEXTURE_MIN_LOD                = 0x813a;\r\nconst TEXTURE_MAX_LOD                = 0x813b;\r\nconst TEXTURE_BASE_LEVEL             = 0x813c;\r\nconst TEXTURE_MAX_LEVEL              = 0x813d;\r\nconst TEXTURE_COMPARE_MODE           = 0x884C;\r\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\r\n\r\n/* Pixel store */\r\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\r\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\r\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\r\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\r\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\r\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\r\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\r\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\r\n\r\nconst R8                           = 0x8229;\r\nconst R8_SNORM                     = 0x8F94;\r\nconst R16F                         = 0x822D;\r\nconst R32F                         = 0x822E;\r\nconst R8UI                         = 0x8232;\r\nconst R8I                          = 0x8231;\r\nconst RG16UI                       = 0x823A;\r\nconst RG16I                        = 0x8239;\r\nconst RG32UI                       = 0x823C;\r\nconst RG32I                        = 0x823B;\r\nconst RG8                          = 0x822B;\r\nconst RG8_SNORM                    = 0x8F95;\r\nconst RG16F                        = 0x822F;\r\nconst RG32F                        = 0x8230;\r\nconst RG8UI                        = 0x8238;\r\nconst RG8I                         = 0x8237;\r\nconst R16UI                        = 0x8234;\r\nconst R16I                         = 0x8233;\r\nconst R32UI                        = 0x8236;\r\nconst R32I                         = 0x8235;\r\nconst RGB8                         = 0x8051;\r\nconst SRGB8                        = 0x8C41;\r\nconst RGB565$1                       = 0x8D62;\r\nconst RGB8_SNORM                   = 0x8F96;\r\nconst R11F_G11F_B10F               = 0x8C3A;\r\nconst RGB9_E5                      = 0x8C3D;\r\nconst RGB16F                       = 0x881B;\r\nconst RGB32F                       = 0x8815;\r\nconst RGB8UI                       = 0x8D7D;\r\nconst RGB8I                        = 0x8D8F;\r\nconst RGB16UI                      = 0x8D77;\r\nconst RGB16I                       = 0x8D89;\r\nconst RGB32UI                      = 0x8D71;\r\nconst RGB32I                       = 0x8D83;\r\nconst RGBA8                        = 0x8058;\r\nconst SRGB8_ALPHA8                 = 0x8C43;\r\nconst RGBA8_SNORM                  = 0x8F97;\r\nconst RGB5_A1$1                      = 0x8057;\r\nconst RGBA4$1                        = 0x8056;\r\nconst RGB10_A2                     = 0x8059;\r\nconst RGBA16F                      = 0x881A;\r\nconst RGBA32F                      = 0x8814;\r\nconst RGBA8UI                      = 0x8D7C;\r\nconst RGBA8I                       = 0x8D8E;\r\nconst RGB10_A2UI                   = 0x906F;\r\nconst RGBA16UI                     = 0x8D76;\r\nconst RGBA16I                      = 0x8D88;\r\nconst RGBA32I                      = 0x8D82;\r\nconst RGBA32UI                     = 0x8D70;\r\n\r\nconst DEPTH_COMPONENT16$1            = 0x81A5;\r\nconst DEPTH_COMPONENT24$1            = 0x81A6;\r\nconst DEPTH_COMPONENT32F$1           = 0x8CAC;\r\nconst DEPTH32F_STENCIL8$1            = 0x8CAD;\r\nconst DEPTH24_STENCIL8$1             = 0x88F0;\r\n\r\n/* DataType */\r\nconst BYTE                         = 0x1400;\r\nconst UNSIGNED_BYTE$1                = 0x1401;\r\nconst SHORT                        = 0x1402;\r\nconst UNSIGNED_SHORT$1               = 0x1403;\r\nconst INT$1                          = 0x1404;\r\nconst UNSIGNED_INT$1                 = 0x1405;\r\nconst FLOAT$1                        = 0x1406;\r\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\r\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\r\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\r\nconst HALF_FLOAT                   = 0x140B;\r\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\r\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\r\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\r\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\r\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\r\nconst UNSIGNED_INT_24_8            = 0x84FA;\r\n\r\nconst RG                           = 0x8227;\r\nconst RG_INTEGER                   = 0x8228;\r\nconst RED                          = 0x1903;\r\nconst RED_INTEGER                  = 0x8D94;\r\nconst RGB_INTEGER                  = 0x8D98;\r\nconst RGBA_INTEGER                 = 0x8D99;\r\n\r\nconst formatInfo = {};\r\n{\r\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\r\n  // the name.\r\n  const f = formatInfo;\r\n  f[ALPHA]           = { numColorComponents: 1, };\r\n  f[LUMINANCE]       = { numColorComponents: 1, };\r\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\r\n  f[RGB]             = { numColorComponents: 3, };\r\n  f[RGBA$1]            = { numColorComponents: 4, };\r\n  f[RED]             = { numColorComponents: 1, };\r\n  f[RED_INTEGER]     = { numColorComponents: 1, };\r\n  f[RG]              = { numColorComponents: 2, };\r\n  f[RG_INTEGER]      = { numColorComponents: 2, };\r\n  f[RGB]             = { numColorComponents: 3, };\r\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\r\n  f[RGBA$1]            = { numColorComponents: 4, };\r\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\r\n  f[DEPTH_COMPONENT$1] = { numColorComponents: 1, };\r\n  f[DEPTH_STENCIL$1]   = { numColorComponents: 2, };\r\n}\r\n\r\n/**\r\n * @typedef {Object} TextureFormatDetails\r\n * @property {number} textureFormat format to pass texImage2D and similar functions.\r\n * @property {boolean} colorRenderable true if you can render to this format of texture.\r\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\r\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\r\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\r\n * @private\r\n */\r\n\r\nlet s_textureInternalFormatInfo;\r\nfunction getTextureInternalFormatInfo(internalFormat) {\r\n  if (!s_textureInternalFormatInfo) {\r\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\r\n    const t = {};\r\n    // unsized formats\r\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\r\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\r\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\r\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_5_6_5], };\r\n    t[RGBA$1]               = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\r\n    t[DEPTH_COMPONENT$1]    = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$1, UNSIGNED_SHORT$1], };\r\n\r\n    // sized formats\r\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\r\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\r\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], };\r\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\r\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\r\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\r\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], };\r\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\r\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\r\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], };\r\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\r\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\r\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], };\r\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], };\r\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\r\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\r\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], };\r\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\r\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], };\r\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], };\r\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\r\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\r\n    t[RGB565$1]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], };\r\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\r\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\r\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\r\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], };\r\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], };\r\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\r\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\r\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], };\r\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\r\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], };\r\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], };\r\n    t[RGBA8]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\r\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\r\n    t[RGBA8_SNORM]        = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\r\n    t[RGB5_A1$1]            = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\r\n    t[RGBA4$1]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], };\r\n    t[RGB10_A2]           = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\r\n    t[RGBA16F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], };\r\n    t[RGBA32F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], };\r\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\r\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\r\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\r\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], };\r\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\r\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], };\r\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], };\r\n    // Sized Internal\r\n    t[DEPTH_COMPONENT16$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], };\r\n    t[DEPTH_COMPONENT24$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\r\n    t[DEPTH_COMPONENT32F$1] = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\r\n    t[DEPTH24_STENCIL8$1]   = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\r\n    t[DEPTH32F_STENCIL8$1]  = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\r\n\r\n    Object.keys(t).forEach(function(internalFormat) {\r\n      const info = t[internalFormat];\r\n      info.bytesPerElementMap = {};\r\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\r\n        const type = info.type[ndx];\r\n        info.bytesPerElementMap[type] = bytesPerElement;\r\n      });\r\n    });\r\n    s_textureInternalFormatInfo = t;\r\n  }\r\n  return s_textureInternalFormatInfo[internalFormat];\r\n}\r\n\r\n/**\r\n * Gets the number of bytes per element for a given internalFormat / type\r\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\r\n * @param {number} type The type parameter for texImage2D etc..\r\n * @return {number} the number of bytes per element for the given internalFormat, type combo\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\r\n  const info = getTextureInternalFormatInfo(internalFormat);\r\n  if (!info) {\r\n    throw \"unknown internal format\";\r\n  }\r\n  const bytesPerElement = info.bytesPerElementMap[type];\r\n  if (bytesPerElement === undefined) {\r\n    throw \"unknown internal format\";\r\n  }\r\n  return bytesPerElement;\r\n}\r\n\r\n/**\r\n * Info related to a specific texture internalFormat as returned\r\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\r\n *\r\n * @typedef {Object} TextureFormatInfo\r\n * @property {number} format Format to pass to texImage2D and related functions\r\n * @property {number} type Type to pass to texImage2D and related functions\r\n * @memberOf module:twgl/textures\r\n */\r\n\r\n/**\r\n * Gets the format and type for a given internalFormat\r\n *\r\n * @param {number} internalFormat The internal format\r\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\r\n  const info = getTextureInternalFormatInfo(internalFormat);\r\n  if (!info) {\r\n    throw \"unknown internal format\";\r\n  }\r\n  return {\r\n    format: info.textureFormat,\r\n    type: info.type[0],\r\n  };\r\n}\r\n\r\n/**\r\n * Returns true if value is power of 2\r\n * @param {number} value number to check.\r\n * @return true if value is power of 2\r\n * @private\r\n */\r\nfunction isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\n/**\r\n * Gets whether or not we can generate mips for the given\r\n * internal format.\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {number} width The width parameter from texImage2D etc..\r\n * @param {number} height The height parameter from texImage2D etc..\r\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\r\n * @return {boolean} true if we can generate mips\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\r\n  if (!isWebGL2(gl)) {\r\n    return isPowerOf2(width) && isPowerOf2(height);\r\n  }\r\n  const info = getTextureInternalFormatInfo(internalFormat);\r\n  if (!info) {\r\n    throw \"unknown internal format\";\r\n  }\r\n  return info.colorRenderable && info.textureFilterable;\r\n}\r\n\r\n/**\r\n * Gets whether or not we can generate mips for the given format\r\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\r\n * @return {boolean} true if we can generate mips\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction canFilter(internalFormat) {\r\n  const info = getTextureInternalFormatInfo(internalFormat);\r\n  if (!info) {\r\n    throw \"unknown internal format\";\r\n  }\r\n  return info.textureFilterable;\r\n}\r\n\r\n/**\r\n * Gets the number of components for a given image format.\r\n * @param {number} format the format.\r\n * @return {number} the number of components for the format.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction getNumComponentsForFormat(format) {\r\n  const info = formatInfo[format];\r\n  if (!info) {\r\n    throw \"unknown format: \" + format;\r\n  }\r\n  return info.numColorComponents;\r\n}\r\n\r\n/**\r\n * Gets the texture type for a given array type.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @return {number} the gl texture type\r\n * @private\r\n */\r\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\r\n  if (isArrayBuffer(src)) {\r\n    return getGLTypeForTypedArray(src);\r\n  }\r\n  return defaultType || UNSIGNED_BYTE$1;\r\n}\r\n\r\nfunction guessDimensions(gl, target, width, height, numElements) {\r\n  if (numElements % 1 !== 0) {\r\n    throw \"can't guess dimensions\";\r\n  }\r\n  if (!width && !height) {\r\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP$1 ? 6 : 1));\r\n    if (size % 1 === 0) {\r\n      width = size;\r\n      height = size;\r\n    } else {\r\n      width = numElements;\r\n      height = 1;\r\n    }\r\n  } else if (!height) {\r\n    height = numElements / width;\r\n    if (height % 1) {\r\n      throw \"can't guess dimensions\";\r\n    }\r\n  } else if (!width) {\r\n    width = numElements / height;\r\n    if (width % 1) {\r\n      throw \"can't guess dimensions\";\r\n    }\r\n  }\r\n  return {\r\n    width: width,\r\n    height: height,\r\n  };\r\n}\r\n\r\n/**\r\n * Sets the default texture color.\r\n *\r\n * The default texture color is used when loading textures from\r\n * urls. Because the URL will be loaded async we'd like to be\r\n * able to use the texture immediately. By putting a 1x1 pixel\r\n * color in the texture we can start using the texture before\r\n * the URL has loaded.\r\n *\r\n * @param {number[]} color Array of 4 values in the range 0 to 1\r\n * @deprecated see {@link module:twgl.setDefaults}\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setDefaultTextureColor(color) {\r\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\r\n}\r\n\r\nfunction setDefaults$1(newDefaults) {\r\n  copyExistingProperties(newDefaults, defaults$1);\r\n  if (newDefaults.textureColor) {\r\n    setDefaultTextureColor(newDefaults.textureColor);\r\n  }\r\n}\r\n\r\n/**\r\n * A function to generate the source for a texture.\r\n * @callback TextureFunc\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {module:twgl.TextureOptions} options the texture options\r\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Texture options passed to most texture functions. Each function will use whatever options\r\n * are appropriate for its needs. This lets you pass the same options to all functions.\r\n *\r\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\r\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\r\n *\r\n * @typedef {Object} TextureOptions\r\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\r\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\r\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\r\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\r\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\r\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\r\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\r\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\r\n * @property {number} [minMag] both the min and mag filter settings.\r\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\r\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\r\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\r\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\r\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\r\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\r\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\r\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\r\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\r\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\r\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\r\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\r\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\r\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\r\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\r\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\r\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\r\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\r\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\r\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\r\n *     the current setting for specific textures.\r\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\r\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\r\n *     the current setting for specific textures.\r\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\r\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\r\n *     the current setting for specific textures.\r\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\r\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\r\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\r\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\r\n *\r\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\r\n *\r\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\r\n *\r\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\r\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\r\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\r\n *    The pieces will be uploaded in `cubeFaceOrder`\r\n *\r\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\r\n *\r\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\r\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\r\n *\r\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\r\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\r\n *\r\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\r\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\r\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\r\n *    by 6. Then\r\n *\r\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\r\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\r\n *\r\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\r\n *\r\n * If `number[]` will be converted to `type`.\r\n *\r\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\r\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\r\n * an array etc...\r\n *\r\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\r\n *\r\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\r\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\r\n *\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Sets any packing state that will be set based on the options.\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @private\r\n */\r\nfunction setPackState(gl, options) {\r\n  if (options.colorspaceConversion !== undefined) {\r\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\r\n  }\r\n  if (options.premultiplyAlpha !== undefined) {\r\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\r\n  }\r\n  if (options.flipY !== undefined) {\r\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\r\n  }\r\n}\r\n\r\n/**\r\n * Set skip state to defaults\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @private\r\n */\r\nfunction setSkipStateToDefault(gl) {\r\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\r\n  if (isWebGL2(gl)) {\r\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\r\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\r\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\r\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\r\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the parameters of a texture or sampler\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {number|WebGLSampler} target texture target or sampler\r\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @private\r\n */\r\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\r\n  if (options.minMag) {\r\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\r\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\r\n  }\r\n  if (options.min) {\r\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\r\n  }\r\n  if (options.mag) {\r\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\r\n  }\r\n  if (options.wrap) {\r\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\r\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\r\n    if (target === TEXTURE_3D$1 || isSampler(gl, target)) {\r\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\r\n    }\r\n  }\r\n  if (options.wrapR) {\r\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\r\n  }\r\n  if (options.wrapS) {\r\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\r\n  }\r\n  if (options.wrapT) {\r\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\r\n  }\r\n  if (options.minLod !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\r\n  }\r\n  if (options.maxLod !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\r\n  }\r\n  if (options.baseLevel !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\r\n  }\r\n  if (options.maxLevel !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\r\n  }\r\n  if (options.compareFunc !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\r\n  }\r\n  if (options.compareMode !== undefined) {\r\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the texture parameters of a texture.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setTextureParameters(gl, tex, options) {\r\n  const target = options.target || TEXTURE_2D$2;\r\n  gl.bindTexture(target, tex);\r\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\r\n}\r\n\r\n/**\r\n * Sets the sampler parameters of a sampler.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setSamplerParameters(gl, sampler, options) {\r\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\r\n}\r\n\r\n/**\r\n * Creates a new sampler object and sets parameters.\r\n *\r\n * Example:\r\n *\r\n *      const sampler = twgl.createSampler(gl, {\r\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\r\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\r\n *      });\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\r\n * @return {Object.<string,WebGLSampler>} the created samplers by name\r\n * @private\r\n */\r\nfunction createSampler(gl, options) {\r\n  const sampler = gl.createSampler();\r\n  setSamplerParameters(gl, sampler, options);\r\n  return sampler;\r\n}\r\n\r\n/**\r\n * Creates a multiple sampler objects and sets parameters on each.\r\n *\r\n * Example:\r\n *\r\n *      const samplers = twgl.createSamplers(gl, {\r\n *        nearest: {\r\n *          minMag: gl.NEAREST,\r\n *        },\r\n *        nearestClampS: {\r\n *          minMag: gl.NEAREST,\r\n *          wrapS: gl.CLAMP_TO_NEAREST,\r\n *        },\r\n *        linear: {\r\n *          minMag: gl.LINEAR,\r\n *        },\r\n *        nearestClamp: {\r\n *          minMag: gl.NEAREST,\r\n *          wrap: gl.CLAMP_TO_EDGE,\r\n *        },\r\n *        linearClamp: {\r\n *          minMag: gl.LINEAR,\r\n *          wrap: gl.CLAMP_TO_EDGE,\r\n *        },\r\n *        linearClampT: {\r\n *          minMag: gl.LINEAR,\r\n *          wrapT: gl.CLAMP_TO_EDGE,\r\n *        },\r\n *      });\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\r\n * @private\r\n */\r\nfunction createSamplers(gl, samplerOptions) {\r\n  const samplers = {};\r\n  Object.keys(samplerOptions).forEach(function(name) {\r\n    samplers[name] = createSampler(gl, samplerOptions[name]);\r\n  });\r\n  return samplers;\r\n}\r\n\r\n/**\r\n * Makes a 1x1 pixel\r\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\r\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\r\n * @return {Uint8Array} Unit8Array with color.\r\n * @private\r\n */\r\nfunction make1Pixel(color) {\r\n  color = color || defaults$1.textureColor;\r\n  if (isArrayBuffer(color)) {\r\n    return color;\r\n  }\r\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\r\n}\r\n\r\n/**\r\n * Sets filtering or generates mips for texture based on width or height\r\n * If width or height is not passed in uses `options.width` and//or `options.height`\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @param {number} [width] width of texture\r\n * @param {number} [height] height of texture\r\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\r\n  options = options || defaults$1.textureOptions;\r\n  internalFormat = internalFormat || RGBA$1;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  width = width || options.width;\r\n  height = height || options.height;\r\n  gl.bindTexture(target, tex);\r\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\r\n    gl.generateMipmap(target);\r\n  } else {\r\n    const filtering = canFilter(internalFormat) ? LINEAR$1 : NEAREST;\r\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\r\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\r\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\r\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\r\n  }\r\n}\r\n\r\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\r\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\r\n}\r\n\r\n/**\r\n * Gets an array of cubemap face enums\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @return {number[]} cubemap face enums\r\n * @private\r\n */\r\nfunction getCubeFaceOrder(gl, options) {\r\n  options = options || {};\r\n  return options.cubeFaceOrder || [\r\n      TEXTURE_CUBE_MAP_POSITIVE_X,\r\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\r\n    ];\r\n}\r\n\r\n/**\r\n * @typedef {Object} FaceInfo\r\n * @property {number} face gl enum for texImage2D\r\n * @property {number} ndx face index (0 - 5) into source data\r\n * @ignore\r\n */\r\n\r\n/**\r\n * Gets an array of FaceInfos\r\n * There's a bug in some NVidia drivers that will crash the driver if\r\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\r\n * the user's desired order from his faces to WebGL and make sure we\r\n * do the faces in WebGL order\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\r\n *    it's needed internally to sort the array of `ndx` properties by `face`.\r\n * @private\r\n */\r\nfunction getCubeFacesWithNdx(gl, options) {\r\n  const faces = getCubeFaceOrder(gl, options);\r\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\r\n  const facesWithNdx = faces.map(function(face, ndx) {\r\n    return { face: face, ndx: ndx };\r\n  });\r\n  facesWithNdx.sort(function(a, b) {\r\n    return a.face - b.face;\r\n  });\r\n  return facesWithNdx;\r\n}\r\n\r\n/**\r\n * Set a texture from the contents of an element. Will also set\r\n * texture filtering or generate mips based on the dimensions of the element\r\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\r\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {HTMLElement} element a canvas, img, or video element.\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @memberOf module:twgl/textures\r\n * @kind function\r\n */\r\nfunction setTextureFromElement(gl, tex, element, options) {\r\n  options = options || defaults$1.textureOptions;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  const level = options.level || 0;\r\n  let width = element.width;\r\n  let height = element.height;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  const type = options.type || formatType.type;\r\n  setPackState(gl, options);\r\n  gl.bindTexture(target, tex);\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    // guess the parts\r\n    const imgWidth  = element.width;\r\n    const imgHeight = element.height;\r\n    let size;\r\n    let slices;\r\n    if (imgWidth / 6 === imgHeight) {\r\n      // It's 6x1\r\n      size = imgHeight;\r\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\r\n    } else if (imgHeight / 6 === imgWidth) {\r\n      // It's 1x6\r\n      size = imgWidth;\r\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\r\n    } else if (imgWidth / 3 === imgHeight / 2) {\r\n      // It's 3x2\r\n      size = imgWidth / 3;\r\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\r\n    } else if (imgWidth / 2 === imgHeight / 3) {\r\n      // It's 2x3\r\n      size = imgWidth / 2;\r\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\r\n    } else {\r\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\r\n    }\r\n    const ctx = getShared2DContext();\r\n    if (ctx) {\r\n      ctx.canvas.width = size;\r\n      ctx.canvas.height = size;\r\n      width = size;\r\n      height = size;\r\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\r\n        const xOffset = slices[f.ndx * 2 + 0] * size;\r\n        const yOffset = slices[f.ndx * 2 + 1] * size;\r\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\r\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\r\n      });\r\n      // Free up the canvas memory\r\n      ctx.canvas.width = 1;\r\n      ctx.canvas.height = 1;\r\n    } else if (typeof createImageBitmap !== 'undefined') {\r\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\r\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\r\n      width = size;\r\n      height = size;\r\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\r\n        const xOffset = slices[f.ndx * 2 + 0] * size;\r\n        const yOffset = slices[f.ndx * 2 + 1] * size;\r\n        // We can't easily use a default texture color here as it would have to match\r\n        // the type across all faces where as with a 2D one there's only one face\r\n        // so we're replacing everything all at once. It also has to be the correct size.\r\n        // On the other hand we need all faces to be the same size so as one face loads\r\n        // the rest match else the texture will be un-renderable.\r\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\r\n        createImageBitmap(element, xOffset, yOffset, size, size, {\r\n          premultiplyAlpha: 'none',\r\n          colorSpaceConversion: 'none',\r\n        })\r\n        .then(function(imageBitmap) {\r\n          setPackState(gl, options);\r\n          gl.bindTexture(target, tex);\r\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\r\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\r\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    const smallest = Math.min(element.width, element.height);\r\n    const largest = Math.max(element.width, element.height);\r\n    const depth = largest / smallest;\r\n    if (depth % 1 !== 0) {\r\n      throw \"can not compute 3D dimensions of element\";\r\n    }\r\n    const xMult = element.width  === largest ? 1 : 0;\r\n    const yMult = element.height === largest ? 1 : 0;\r\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\r\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\r\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\r\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\r\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\r\n    for (let d = 0; d < depth; ++d) {\r\n      const srcX = d * smallest * xMult;\r\n      const srcY = d * smallest * yMult;\r\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\r\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\r\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\r\n    }\r\n    setSkipStateToDefault(gl);\r\n  } else {\r\n    gl.texImage2D(target, level, internalFormat, format, type, element);\r\n  }\r\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\r\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\r\n  }\r\n  setTextureParameters(gl, tex, options);\r\n}\r\n\r\nfunction noop() {\r\n}\r\n\r\n/**\r\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\r\n * @param {string} url url to image\r\n * @returns {boolean} true if the window's origin is the same as image's url\r\n * @private\r\n */\r\nfunction urlIsSameOrigin(url) {\r\n  if (typeof document !== 'undefined') {\r\n    // for IE really\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    return a.hostname === location.hostname &&\r\n           a.port     === location.port &&\r\n           a.protocol === location.protocol;\r\n  } else {\r\n    const localOrigin = (new URL(location.href)).origin;\r\n    const urlOrigin = (new URL(url, location.href)).origin;\r\n    return urlOrigin === localOrigin;\r\n  }\r\n}\r\n\r\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\r\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\r\n     ? 'anonymous'\r\n     : crossOrigin;\r\n}\r\n\r\n/**\r\n * Loads an image\r\n * @param {string} url url to image\r\n * @param {string} crossOrigin\r\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\r\n *     if there was an error\r\n * @return {HTMLImageElement} the image being loaded.\r\n * @private\r\n */\r\nfunction loadImage(url, crossOrigin, callback) {\r\n  callback = callback || noop;\r\n  let img;\r\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\r\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\r\n  if (typeof Image !== 'undefined') {\r\n    img = new Image();\r\n    if (crossOrigin !== undefined) {\r\n      img.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    const clearEventHandlers = function clearEventHandlers() {\r\n      img.removeEventListener('error', onError);  // eslint-disable-line\r\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\r\n      img = null;\r\n    };\r\n\r\n    const onError = function onError() {\r\n      const msg = \"couldn't load image: \" + url;\r\n      error$1(msg);\r\n      callback(msg, img);\r\n      clearEventHandlers();\r\n    };\r\n\r\n    const onLoad = function onLoad() {\r\n      callback(null, img);\r\n      clearEventHandlers();\r\n    };\r\n\r\n    img.addEventListener('error', onError);\r\n    img.addEventListener('load', onLoad);\r\n    img.src = url;\r\n    return img;\r\n  } else if (typeof ImageBitmap !== 'undefined') {\r\n    let err;\r\n    let bm;\r\n    const cb = function cb() {\r\n      callback(err, bm);\r\n    };\r\n\r\n    const options = {};\r\n    if (crossOrigin) {\r\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\r\n    }\r\n    fetch(url, options).then(function(response) {\r\n      if (!response.ok) {\r\n        throw response;\r\n      }\r\n      return response.blob();\r\n    }).then(function(blob) {\r\n      return createImageBitmap(blob, {\r\n        premultiplyAlpha: 'none',\r\n        colorSpaceConversion: 'none',\r\n      });\r\n    }).then(function(bitmap) {\r\n      // not sure if this works. We don't want\r\n      // to catch the user's error. So, call\r\n      // the callback in a timeout so we're\r\n      // not in this scope inside the promise.\r\n      bm = bitmap;\r\n      setTimeout(cb);\r\n    }).catch(function(e) {\r\n      err = e;\r\n      setTimeout(cb);\r\n    });\r\n    img = null;\r\n  }\r\n  return img;\r\n}\r\n\r\n/**\r\n * check if object is a TexImageSource\r\n *\r\n * @param {Object} obj Object to test\r\n * @return {boolean} true if object is a TexImageSource\r\n * @private\r\n */\r\nfunction isTexImageSource(obj) {\r\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\r\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\r\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\r\n}\r\n\r\n/**\r\n * if obj is an TexImageSource then just\r\n * uses it otherwise if obj is a string\r\n * then load it first.\r\n *\r\n * @param {string|TexImageSource} obj\r\n * @param {string} crossOrigin\r\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\r\n *     if there was an error\r\n * @private\r\n */\r\nfunction loadAndUseImage(obj, crossOrigin, callback) {\r\n  if (isTexImageSource(obj)) {\r\n    setTimeout(function() {\r\n      callback(null, obj);\r\n    });\r\n    return obj;\r\n  }\r\n\r\n  return loadImage(obj, crossOrigin, callback);\r\n}\r\n\r\n/**\r\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\r\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @memberOf module:twgl/textures\r\n * @private\r\n */\r\nfunction setTextureTo1PixelColor(gl, tex, options) {\r\n  options = options || defaults$1.textureOptions;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  gl.bindTexture(target, tex);\r\n  if (options.color === false) {\r\n    return;\r\n  }\r\n  // Assume it's a URL\r\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\r\n  const color = make1Pixel(options.color);\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    for (let ii = 0; ii < 6; ++ii) {\r\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\r\n    }\r\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    gl.texImage3D(target, 0, RGBA$1, 1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\r\n  } else {\r\n    gl.texImage2D(target, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\r\n  }\r\n}\r\n\r\n/**\r\n * The src image(s) used to create a texture.\r\n *\r\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\r\n * you can pass in urls for images to load into the textures. If it's a single url\r\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\r\n * this will be a corresponding array of images for the cubemap.\r\n *\r\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * A callback for when an image finished downloading and been uploaded into a texture\r\n * @callback TextureReadyCallback\r\n * @param {*} err If truthy there was an error.\r\n * @param {WebGLTexture} texture the texture.\r\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * A callback for when all images have finished downloading and been uploaded into their respective textures\r\n * @callback TexturesReadyCallback\r\n * @param {*} err If truthy there was an error.\r\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\r\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * A callback for when an image finished downloading and been uploaded into a texture\r\n * @callback CubemapReadyCallback\r\n * @param {*} err If truthy there was an error.\r\n * @param {WebGLTexture} tex the texture.\r\n * @param {HTMLImageElement[]} imgs the images for each face.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * A callback for when an image finished downloading and been uploaded into a texture\r\n * @callback ThreeDReadyCallback\r\n * @param {*} err If truthy there was an error.\r\n * @param {WebGLTexture} tex the texture.\r\n * @param {HTMLImageElement[]} imgs the images for each slice.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Loads a texture from an image from a Url as specified in `options.src`\r\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\r\n * immediately useable. It will be updated with the contents of the image once the image has finished\r\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\r\n *    be non null if there was an error.\r\n * @return {HTMLImageElement} the image being downloaded.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction loadTextureFromUrl(gl, tex, options, callback) {\r\n  callback = callback || noop;\r\n  options = options || defaults$1.textureOptions;\r\n  setTextureTo1PixelColor(gl, tex, options);\r\n  // Because it's async we need to copy the options.\r\n  options = Object.assign({}, options);\r\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\r\n    if (err) {\r\n      callback(err, tex, img);\r\n    } else {\r\n      setTextureFromElement(gl, tex, img, options);\r\n      callback(null, tex, img);\r\n    }\r\n  });\r\n  return img;\r\n}\r\n\r\n/**\r\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\r\n * so that it is usable immediately unless `option.color === false`.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\r\n *    be non null if there was an error.\r\n * @memberOf module:twgl/textures\r\n * @private\r\n */\r\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\r\n  callback = callback || noop;\r\n  const urls = options.src;\r\n  if (urls.length !== 6) {\r\n    throw \"there must be 6 urls for a cubemap\";\r\n  }\r\n  const level = options.level || 0;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  const type = options.type || UNSIGNED_BYTE$1;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  if (target !== TEXTURE_CUBE_MAP$1) {\r\n    throw \"target must be TEXTURE_CUBE_MAP\";\r\n  }\r\n  setTextureTo1PixelColor(gl, tex, options);\r\n  // Because it's async we need to copy the options.\r\n  options = Object.assign({}, options);\r\n  let numToLoad = 6;\r\n  const errors = [];\r\n  const faces = getCubeFaceOrder(gl, options);\r\n  let imgs;  // eslint-disable-line\r\n\r\n  function uploadImg(faceTarget) {\r\n    return function(err, img) {\r\n      --numToLoad;\r\n      if (err) {\r\n        errors.push(err);\r\n      } else {\r\n        if (img.width !== img.height) {\r\n          errors.push(\"cubemap face img is not a square: \" + img.src);\r\n        } else {\r\n          setPackState(gl, options);\r\n          gl.bindTexture(target, tex);\r\n\r\n          // So assuming this is the first image we now have one face that's img sized\r\n          // and 5 faces that are 1x1 pixel so size the other faces\r\n          if (numToLoad === 5) {\r\n            // use the default order\r\n            getCubeFaceOrder().forEach(function(otherTarget) {\r\n              // Should we re-use the same face or a color?\r\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\r\n            });\r\n          } else {\r\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\r\n          }\r\n\r\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\r\n            gl.generateMipmap(target);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (numToLoad === 0) {\r\n        callback(errors.length ? errors : undefined, tex, imgs);\r\n      }\r\n    };\r\n  }\r\n\r\n  imgs = urls.map(function(url, ndx) {\r\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\r\n  });\r\n}\r\n\r\n/**\r\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\r\n * Will set the texture to a 1x1 pixel color\r\n * so that it is usable immediately unless `option.color === false`.\r\n *\r\n * If the width and height is not specified the width and height of the first\r\n * image loaded will be used. Note that since images are loaded async\r\n * which image downloads first is unknown.\r\n *\r\n * If an image is not the same size as the width and height it will be scaled\r\n * to that width and height.\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\r\n *    be non null if there was an error.\r\n * @memberOf module:twgl/textures\r\n * @private\r\n */\r\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\r\n  callback = callback || noop;\r\n  const urls = options.src;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  const type = options.type || UNSIGNED_BYTE$1;\r\n  const target = options.target || TEXTURE_2D_ARRAY$1;\r\n  if (target !== TEXTURE_3D$1 && target !== TEXTURE_2D_ARRAY$1) {\r\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\r\n  }\r\n  setTextureTo1PixelColor(gl, tex, options);\r\n  // Because it's async we need to copy the options.\r\n  options = Object.assign({}, options);\r\n  let numToLoad = urls.length;\r\n  const errors = [];\r\n  let imgs;  // eslint-disable-line\r\n  const level = options.level || 0;\r\n  let width = options.width;\r\n  let height = options.height;\r\n  const depth = urls.length;\r\n  let firstImage = true;\r\n\r\n  function uploadImg(slice) {\r\n    return function(err, img) {\r\n      --numToLoad;\r\n      if (err) {\r\n        errors.push(err);\r\n      } else {\r\n        setPackState(gl, options);\r\n        gl.bindTexture(target, tex);\r\n\r\n        if (firstImage) {\r\n          firstImage = false;\r\n          width = options.width || img.width;\r\n          height = options.height || img.height;\r\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\r\n\r\n          // put it in every slice otherwise some slices will be 0,0,0,0\r\n          for (let s = 0; s < depth; ++s) {\r\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\r\n          }\r\n        } else {\r\n          let src = img;\r\n          let ctx;\r\n          if (img.width !== width || img.height !== height) {\r\n            // Size the image to fix\r\n            ctx = getShared2DContext();\r\n            src = ctx.canvas;\r\n            ctx.canvas.width = width;\r\n            ctx.canvas.height = height;\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n          }\r\n\r\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\r\n\r\n          // free the canvas memory\r\n          if (ctx && src === ctx.canvas) {\r\n            ctx.canvas.width = 0;\r\n            ctx.canvas.height = 0;\r\n          }\r\n        }\r\n\r\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\r\n          gl.generateMipmap(target);\r\n        }\r\n      }\r\n\r\n      if (numToLoad === 0) {\r\n        callback(errors.length ? errors : undefined, tex, imgs);\r\n      }\r\n    };\r\n  }\r\n\r\n  imgs = urls.map(function(url, ndx) {\r\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\r\n  });\r\n}\r\n\r\n/**\r\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\r\n * guess the size. See {@link module:twgl.TextureOptions}.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n *   This is often the same options you passed in when you created the texture.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setTextureFromArray(gl, tex, src, options) {\r\n  options = options || defaults$1.textureOptions;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  gl.bindTexture(target, tex);\r\n  let width = options.width;\r\n  let height = options.height;\r\n  let depth = options.depth;\r\n  const level = options.level || 0;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\r\n  if (!isArrayBuffer(src)) {\r\n    const Type = getTypedArrayTypeForGLType(type);\r\n    src = new Type(src);\r\n  } else if (src instanceof Uint8ClampedArray) {\r\n    src = new Uint8Array(src.buffer);\r\n  }\r\n\r\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\r\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\r\n  if (numElements % 1) {\r\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\r\n  }\r\n  let dimensions;\r\n  if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    if (!width && !height && !depth) {\r\n      const size = Math.cbrt(numElements);\r\n      if (size % 1 !== 0) {\r\n        throw \"can't guess cube size of array of numElements: \" + numElements;\r\n      }\r\n      width = size;\r\n      height = size;\r\n      depth = size;\r\n    } else if (width && (!height || !depth)) {\r\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\r\n      height = dimensions.width;\r\n      depth = dimensions.height;\r\n    } else if (height && (!width || !depth)) {\r\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\r\n      width = dimensions.width;\r\n      depth = dimensions.height;\r\n    } else {\r\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\r\n      width = dimensions.width;\r\n      height = dimensions.height;\r\n    }\r\n  } else {\r\n    dimensions = guessDimensions(gl, target, width, height, numElements);\r\n    width = dimensions.width;\r\n    height = dimensions.height;\r\n  }\r\n  setSkipStateToDefault(gl);\r\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\r\n  setPackState(gl, options);\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\r\n    const faceSize = numElements / 6 * elementsPerElement;\r\n\r\n    getCubeFacesWithNdx(gl, options).forEach(f => {\r\n      const offset = faceSize * f.ndx;\r\n      const data = src.subarray(offset, offset + faceSize);\r\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\r\n    });\r\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\r\n  } else {\r\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\r\n  }\r\n  return {\r\n    width: width,\r\n    height: height,\r\n    depth: depth,\r\n    type: type,\r\n  };\r\n}\r\n\r\n/**\r\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\r\n * You must set `options.width` and `options.height`.\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction setEmptyTexture(gl, tex, options) {\r\n  const target = options.target || TEXTURE_2D$2;\r\n  gl.bindTexture(target, tex);\r\n  const level = options.level || 0;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  const type = options.type || formatType.type;\r\n  setPackState(gl, options);\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    for (let ii = 0; ii < 6; ++ii) {\r\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\r\n    }\r\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\r\n  } else {\r\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a texture based on the options passed in.\r\n *\r\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\r\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\r\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\r\n * @return {WebGLTexture} the created texture.\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction createTexture(gl, options, callback) {\r\n  callback = callback || noop;\r\n  options = options || defaults$1.textureOptions;\r\n  const tex = gl.createTexture();\r\n  const target = options.target || TEXTURE_2D$2;\r\n  let width  = options.width  || 1;\r\n  let height = options.height || 1;\r\n  const internalFormat = options.internalFormat || RGBA$1;\r\n  gl.bindTexture(target, tex);\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    // this should have been the default for cubemaps :(\r\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\r\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\r\n  }\r\n  let src = options.src;\r\n  if (src) {\r\n    if (typeof src === \"function\") {\r\n      src = src(gl, options);\r\n    }\r\n    if (typeof (src) === \"string\") {\r\n      loadTextureFromUrl(gl, tex, options, callback);\r\n    } else if (isArrayBuffer(src) ||\r\n               (Array.isArray(src) && (\r\n                    typeof src[0] === 'number' ||\r\n                    Array.isArray(src[0]) ||\r\n                    isArrayBuffer(src[0]))\r\n               )\r\n              ) {\r\n      const dimensions = setTextureFromArray(gl, tex, src, options);\r\n      width  = dimensions.width;\r\n      height = dimensions.height;\r\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\r\n      if (target === TEXTURE_CUBE_MAP$1) {\r\n        loadCubemapFromUrls(gl, tex, options, callback);\r\n      } else {\r\n        loadSlicesFromUrls(gl, tex, options, callback);\r\n      }\r\n    } else { // if (isTexImageSource(src))\r\n      setTextureFromElement(gl, tex, src, options);\r\n      width  = src.width;\r\n      height = src.height;\r\n    }\r\n  } else {\r\n    setEmptyTexture(gl, tex, options);\r\n  }\r\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\r\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\r\n  }\r\n  setTextureParameters(gl, tex, options);\r\n  return tex;\r\n}\r\n\r\n/**\r\n * Resizes a texture based on the options passed in.\r\n *\r\n * Note: This is not a generic resize anything function.\r\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\r\n * It will use `options.src` if it exists to try to determine a `type`\r\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\r\n * for the texture. Texture parameters will be set accordingly\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {WebGLTexture} tex the texture to resize\r\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\r\n * @param {number} [width] the new width. If not passed in will use `options.width`\r\n * @param {number} [height] the new height. If not passed in will use `options.height`\r\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction resizeTexture(gl, tex, options, width, height, depth) {\r\n  width = width || options.width;\r\n  height = height || options.height;\r\n  depth = depth || options.depth;\r\n  const target = options.target || TEXTURE_2D$2;\r\n  gl.bindTexture(target, tex);\r\n  const level = options.level || 0;\r\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\r\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\r\n  const format = options.format || formatType.format;\r\n  let type;\r\n  const src = options.src;\r\n  if (!src) {\r\n    type = options.type || formatType.type;\r\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\r\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\r\n  } else {\r\n    type = options.type || formatType.type;\r\n  }\r\n  if (target === TEXTURE_CUBE_MAP$1) {\r\n    for (let ii = 0; ii < 6; ++ii) {\r\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\r\n    }\r\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\r\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\r\n  } else {\r\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\r\n  }\r\n}\r\n\r\n/**\r\n * Check if a src is an async request.\r\n * if src is a string we're going to download an image\r\n * if src is an array of strings we're going to download cubemap images\r\n * @param {*} src The src from a TextureOptions\r\n * @returns {bool} true if src is async.\r\n * @private\r\n */\r\nfunction isAsyncSrc(src) {\r\n  return typeof src === 'string' ||\r\n         (Array.isArray(src) && typeof src[0] === 'string');\r\n}\r\n\r\n/**\r\n * Creates a bunch of textures based on the passed in options.\r\n *\r\n * Example:\r\n *\r\n *     const textures = twgl.createTextures(gl, {\r\n *       // a power of 2 image\r\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\r\n *       // a non-power of 2 image\r\n *       clover: { src: \"images/clover.jpg\" },\r\n *       // From a canvas\r\n *       fromCanvas: { src: ctx.canvas },\r\n *       // A cubemap from 6 images\r\n *       yokohama: {\r\n *         target: gl.TEXTURE_CUBE_MAP,\r\n *         src: [\r\n *           'images/yokohama/posx.jpg',\r\n *           'images/yokohama/negx.jpg',\r\n *           'images/yokohama/posy.jpg',\r\n *           'images/yokohama/negy.jpg',\r\n *           'images/yokohama/posz.jpg',\r\n *           'images/yokohama/negz.jpg',\r\n *         ],\r\n *       },\r\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\r\n *       goldengate: {\r\n *         target: gl.TEXTURE_CUBE_MAP,\r\n *         src: 'images/goldengate.jpg',\r\n *       },\r\n *       // A 2x2 pixel texture from a JavaScript array\r\n *       checker: {\r\n *         mag: gl.NEAREST,\r\n *         min: gl.LINEAR,\r\n *         src: [\r\n *           255,255,255,255,\r\n *           192,192,192,255,\r\n *           192,192,192,255,\r\n *           255,255,255,255,\r\n *         ],\r\n *       },\r\n *       // a 1x2 pixel texture from a typed array.\r\n *       stripe: {\r\n *         mag: gl.NEAREST,\r\n *         min: gl.LINEAR,\r\n *         format: gl.LUMINANCE,\r\n *         src: new Uint8Array([\r\n *           255,\r\n *           128,\r\n *           255,\r\n *           128,\r\n *           255,\r\n *           128,\r\n *           255,\r\n *           128,\r\n *         ]),\r\n *         width: 1,\r\n *       },\r\n *     });\r\n *\r\n * Now\r\n *\r\n * *   `textures.hftIcon` will be a 2d texture\r\n * *   `textures.clover` will be a 2d texture\r\n * *   `textures.fromCanvas` will be a 2d texture\r\n * *   `textures.yohohama` will be a cubemap texture\r\n * *   `textures.goldengate` will be a cubemap texture\r\n * *   `textures.checker` will be a 2d texture\r\n * *   `textures.stripe` will be a 2d texture\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\r\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\r\n * @return {Object.<string,WebGLTexture>} the created textures by name\r\n * @memberOf module:twgl/textures\r\n */\r\nfunction createTextures(gl, textureOptions, callback) {\r\n  callback = callback || noop;\r\n  let numDownloading = 0;\r\n  const errors = [];\r\n  const textures = {};\r\n  const images = {};\r\n\r\n  function callCallbackIfReady() {\r\n    if (numDownloading === 0) {\r\n      setTimeout(function() {\r\n        callback(errors.length ? errors : undefined, textures, images);\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  Object.keys(textureOptions).forEach(function(name) {\r\n    const options = textureOptions[name];\r\n    let onLoadFn;\r\n    if (isAsyncSrc(options.src)) {\r\n      onLoadFn = function(err, tex, img) {\r\n        images[name] = img;\r\n        --numDownloading;\r\n        if (err) {\r\n          errors.push(err);\r\n        }\r\n        callCallbackIfReady();\r\n      };\r\n      ++numDownloading;\r\n    }\r\n    textures[name] = createTexture(gl, options, onLoadFn);\r\n  });\r\n\r\n  // queue the callback if there are no images to download.\r\n  // We do this because if your code is structured to wait for\r\n  // images to download but then you comment out all the async\r\n  // images your code would break.\r\n  callCallbackIfReady();\r\n\r\n  return textures;\r\n}\r\n\r\nvar textures = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  setTextureDefaults_: setDefaults$1,\r\n  createSampler: createSampler,\r\n  createSamplers: createSamplers,\r\n  setSamplerParameters: setSamplerParameters,\r\n  createTexture: createTexture,\r\n  setEmptyTexture: setEmptyTexture,\r\n  setTextureFromArray: setTextureFromArray,\r\n  loadTextureFromUrl: loadTextureFromUrl,\r\n  setTextureFromElement: setTextureFromElement,\r\n  setTextureFilteringForSize: setTextureFilteringForSize,\r\n  setTextureParameters: setTextureParameters,\r\n  setDefaultTextureColor: setDefaultTextureColor,\r\n  createTextures: createTextures,\r\n  resizeTexture: resizeTexture,\r\n  canGenerateMipmap: canGenerateMipmap,\r\n  canFilter: canFilter,\r\n  getNumComponentsForFormat: getNumComponentsForFormat,\r\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\r\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Low level shader program related functions\r\n *\r\n * You should generally not need to use these functions. They are provided\r\n * for those cases where you're doing something out of the ordinary\r\n * and you need lower level access.\r\n *\r\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\r\n * itself\r\n *\r\n * See {@link module:twgl} for core functions\r\n *\r\n * @module twgl/programs\r\n */\r\n\r\nconst error = error$1;\r\nconst warn = warn$1;\r\nfunction getElementById(id) {\r\n  return (typeof document !== 'undefined' && document.getElementById)\r\n      ? document.getElementById(id)\r\n      : null;\r\n}\r\n\r\nconst TEXTURE0                       = 0x84c0;\r\nconst DYNAMIC_DRAW                   = 0x88e8;\r\n\r\nconst ARRAY_BUFFER                   = 0x8892;\r\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\r\nconst UNIFORM_BUFFER                 = 0x8a11;\r\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\r\n\r\nconst TRANSFORM_FEEDBACK             = 0x8e22;\r\n\r\nconst COMPILE_STATUS                 = 0x8b81;\r\nconst LINK_STATUS                    = 0x8b82;\r\nconst FRAGMENT_SHADER                = 0x8b30;\r\nconst VERTEX_SHADER                  = 0x8b31;\r\nconst SEPARATE_ATTRIBS               = 0x8c8d;\r\n\r\nconst ACTIVE_UNIFORMS                = 0x8b86;\r\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\r\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\r\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\r\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\r\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\r\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\r\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\r\n\r\nconst FLOAT                         = 0x1406;\r\nconst FLOAT_VEC2                    = 0x8B50;\r\nconst FLOAT_VEC3                    = 0x8B51;\r\nconst FLOAT_VEC4                    = 0x8B52;\r\nconst INT                           = 0x1404;\r\nconst INT_VEC2                      = 0x8B53;\r\nconst INT_VEC3                      = 0x8B54;\r\nconst INT_VEC4                      = 0x8B55;\r\nconst BOOL                          = 0x8B56;\r\nconst BOOL_VEC2                     = 0x8B57;\r\nconst BOOL_VEC3                     = 0x8B58;\r\nconst BOOL_VEC4                     = 0x8B59;\r\nconst FLOAT_MAT2                    = 0x8B5A;\r\nconst FLOAT_MAT3                    = 0x8B5B;\r\nconst FLOAT_MAT4                    = 0x8B5C;\r\nconst SAMPLER_2D                    = 0x8B5E;\r\nconst SAMPLER_CUBE                  = 0x8B60;\r\nconst SAMPLER_3D                    = 0x8B5F;\r\nconst SAMPLER_2D_SHADOW             = 0x8B62;\r\nconst FLOAT_MAT2x3                  = 0x8B65;\r\nconst FLOAT_MAT2x4                  = 0x8B66;\r\nconst FLOAT_MAT3x2                  = 0x8B67;\r\nconst FLOAT_MAT3x4                  = 0x8B68;\r\nconst FLOAT_MAT4x2                  = 0x8B69;\r\nconst FLOAT_MAT4x3                  = 0x8B6A;\r\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\r\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\r\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\r\nconst UNSIGNED_INT                  = 0x1405;\r\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\r\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\r\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\r\nconst INT_SAMPLER_2D                = 0x8DCA;\r\nconst INT_SAMPLER_3D                = 0x8DCB;\r\nconst INT_SAMPLER_CUBE              = 0x8DCC;\r\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\r\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\r\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\r\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\r\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\r\n\r\nconst TEXTURE_2D$1                    = 0x0DE1;\r\nconst TEXTURE_CUBE_MAP              = 0x8513;\r\nconst TEXTURE_3D                    = 0x806F;\r\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\r\n\r\nconst typeMap = {};\r\n\r\n/**\r\n * Returns the corresponding bind point for a given sampler type\r\n * @private\r\n */\r\nfunction getBindPointForSamplerType(gl, type) {\r\n  return typeMap[type].bindPoint;\r\n}\r\n\r\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\r\n// this code could be a lot smaller but that is sadly really slow (T_T)\r\n\r\nfunction floatSetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1f(location, v);\r\n  };\r\n}\r\n\r\nfunction floatArraySetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1fv(location, v);\r\n  };\r\n}\r\n\r\nfunction floatVec2Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform2fv(location, v);\r\n  };\r\n}\r\n\r\nfunction floatVec3Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform3fv(location, v);\r\n  };\r\n}\r\n\r\nfunction floatVec4Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform4fv(location, v);\r\n  };\r\n}\r\n\r\nfunction intSetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1i(location, v);\r\n  };\r\n}\r\n\r\nfunction intArraySetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1iv(location, v);\r\n  };\r\n}\r\n\r\nfunction intVec2Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform2iv(location, v);\r\n  };\r\n}\r\n\r\nfunction intVec3Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform3iv(location, v);\r\n  };\r\n}\r\n\r\nfunction intVec4Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform4iv(location, v);\r\n  };\r\n}\r\n\r\nfunction uintSetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1ui(location, v);\r\n  };\r\n}\r\n\r\nfunction uintArraySetter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform1uiv(location, v);\r\n  };\r\n}\r\n\r\nfunction uintVec2Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform2uiv(location, v);\r\n  };\r\n}\r\n\r\nfunction uintVec3Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform3uiv(location, v);\r\n  };\r\n}\r\n\r\nfunction uintVec4Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniform4uiv(location, v);\r\n  };\r\n}\r\n\r\nfunction floatMat2Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix2fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat3Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix3fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat4Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix4fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat23Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix2x3fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat32Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix3x2fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat24Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix2x4fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat42Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix4x2fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat34Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix3x4fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction floatMat43Setter(gl, location) {\r\n  return function(v) {\r\n    gl.uniformMatrix4x3fv(location, false, v);\r\n  };\r\n}\r\n\r\nfunction samplerSetter(gl, type, unit, location) {\r\n  const bindPoint = getBindPointForSamplerType(gl, type);\r\n  return isWebGL2(gl) ? function(textureOrPair) {\r\n    let texture;\r\n    let sampler;\r\n    if (!textureOrPair || isTexture(gl, textureOrPair)) {\r\n      texture = textureOrPair;\r\n      sampler = null;\r\n    } else {\r\n      texture = textureOrPair.texture;\r\n      sampler = textureOrPair.sampler;\r\n    }\r\n    gl.uniform1i(location, unit);\r\n    gl.activeTexture(TEXTURE0 + unit);\r\n    gl.bindTexture(bindPoint, texture);\r\n    gl.bindSampler(unit, sampler);\r\n  } : function(texture) {\r\n    gl.uniform1i(location, unit);\r\n    gl.activeTexture(TEXTURE0 + unit);\r\n    gl.bindTexture(bindPoint, texture);\r\n  };\r\n}\r\n\r\nfunction samplerArraySetter(gl, type, unit, location, size) {\r\n  const bindPoint = getBindPointForSamplerType(gl, type);\r\n  const units = new Int32Array(size);\r\n  for (let ii = 0; ii < size; ++ii) {\r\n    units[ii] = unit + ii;\r\n  }\r\n\r\n  return isWebGL2(gl) ? function(textures) {\r\n    gl.uniform1iv(location, units);\r\n    textures.forEach(function(textureOrPair, index) {\r\n      gl.activeTexture(TEXTURE0 + units[index]);\r\n      let texture;\r\n      let sampler;\r\n      if (!textureOrPair || isTexture(gl, textureOrPair)) {\r\n        texture = textureOrPair;\r\n        sampler = null;\r\n      } else {\r\n        texture = textureOrPair.texture;\r\n        sampler = textureOrPair.sampler;\r\n      }\r\n      gl.bindSampler(unit, sampler);\r\n      gl.bindTexture(bindPoint, texture);\r\n    });\r\n  } : function(textures) {\r\n    gl.uniform1iv(location, units);\r\n    textures.forEach(function(texture, index) {\r\n      gl.activeTexture(TEXTURE0 + units[index]);\r\n      gl.bindTexture(bindPoint, texture);\r\n    });\r\n  };\r\n}\r\n\r\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\r\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\r\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\r\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\r\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\r\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\r\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\r\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\r\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\r\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\r\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\r\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\r\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\r\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\r\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\r\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\r\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\r\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\r\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\r\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\r\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\r\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\r\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\r\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\r\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\r\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\r\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\r\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\r\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\r\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\r\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\r\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\r\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\r\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\r\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\r\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\r\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\r\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\r\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\r\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\r\n\r\nfunction floatAttribSetter(gl, index) {\r\n  return function(b) {\r\n    if (b.value) {\r\n      gl.disableVertexAttribArray(index);\r\n      switch (b.value.length) {\r\n        case 4:\r\n          gl.vertexAttrib4fv(index, b.value);\r\n          break;\r\n        case 3:\r\n          gl.vertexAttrib3fv(index, b.value);\r\n          break;\r\n        case 2:\r\n          gl.vertexAttrib2fv(index, b.value);\r\n          break;\r\n        case 1:\r\n          gl.vertexAttrib1fv(index, b.value);\r\n          break;\r\n        default:\r\n          throw new Error('the length of a float constant value must be between 1 and 4!');\r\n      }\r\n    } else {\r\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\r\n      gl.enableVertexAttribArray(index);\r\n      gl.vertexAttribPointer(\r\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\r\n      if (gl.vertexAttribDivisor) {\r\n        gl.vertexAttribDivisor(index, b.divisor || 0);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction intAttribSetter(gl, index) {\r\n  return function(b) {\r\n    if (b.value) {\r\n      gl.disableVertexAttribArray(index);\r\n      if (b.value.length === 4) {\r\n        gl.vertexAttrib4iv(index, b.value);\r\n      } else {\r\n        throw new Error('The length of an integer constant value must be 4!');\r\n      }\r\n    } else {\r\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\r\n      gl.enableVertexAttribArray(index);\r\n      gl.vertexAttribIPointer(\r\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\r\n      if (gl.vertexAttribDivisor) {\r\n        gl.vertexAttribDivisor(index, b.divisor || 0);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction uintAttribSetter(gl, index) {\r\n  return function(b) {\r\n    if (b.value) {\r\n      gl.disableVertexAttribArray(index);\r\n      if (b.value.length === 4) {\r\n        gl.vertexAttrib4uiv(index, b.value);\r\n      } else {\r\n        throw new Error('The length of an unsigned integer constant value must be 4!');\r\n      }\r\n    } else {\r\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\r\n      gl.enableVertexAttribArray(index);\r\n      gl.vertexAttribIPointer(\r\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\r\n      if (gl.vertexAttribDivisor) {\r\n        gl.vertexAttribDivisor(index, b.divisor || 0);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction matAttribSetter(gl, index, typeInfo) {\r\n  const defaultSize = typeInfo.size;\r\n  const count = typeInfo.count;\r\n\r\n  return function(b) {\r\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\r\n    const numComponents = b.size || b.numComponents || defaultSize;\r\n    const size = numComponents / count;\r\n    const type = b.type || FLOAT;\r\n    const typeInfo = typeMap[type];\r\n    const stride = typeInfo.size * numComponents;\r\n    const normalize = b.normalize || false;\r\n    const offset = b.offset || 0;\r\n    const rowOffset = stride / count;\r\n    for (let i = 0; i < count; ++i) {\r\n      gl.enableVertexAttribArray(index + i);\r\n      gl.vertexAttribPointer(\r\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\r\n      if (gl.vertexAttribDivisor) {\r\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n\r\n\r\nconst attrTypeMap = {};\r\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\r\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\r\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\r\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\r\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\r\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\r\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\r\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\r\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\r\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\r\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\r\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\r\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\r\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\r\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\r\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\r\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\r\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\r\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\r\n\r\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\r\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\r\n  // Note: Error message formats are not defined by any spec so this may or may not work.\r\n  const matches = [...log.matchAll(errorRE)];\r\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\r\n    const lineNo = parseInt(m[1]);\r\n    const next = matches[ndx + 1];\r\n    const end = next ? next.index : log.length;\r\n    const msg = log.substring(m.index, end);\r\n    return [lineNo - 1, msg];\r\n  }));\r\n  return src.split('\\n').map((line, lineNo) => {\r\n    const err = lineNoToErrorMap.get(lineNo);\r\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\r\n  }).join('\\n');\r\n}\r\n\r\n/**\r\n * Error Callback\r\n * @callback ErrorCallback\r\n * @param {string} msg error message.\r\n * @param {number} [lineOffset] amount to add to line number\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Program Callback\r\n * @callback ProgramCallback\r\n * @param {string} [err] error message, falsy if no error\r\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\r\n */\r\n\r\nconst spaceRE = /^[ \\t]*\\n/;\r\n\r\n/**\r\n * Remove the first end of line because WebGL 2.0 requires\r\n * #version 300 es\r\n * as the first line. No whitespace allowed before that line\r\n * so\r\n *\r\n * <script>\r\n * #version 300 es\r\n * </script>\r\n *\r\n * Has one line before it which is invalid according to GLSL ES 3.00\r\n *\r\n * @param {string} shaderSource The source of the shader\r\n * @returns {{shaderSource: string, lineOffset: number}}\r\n * @private\r\n */\r\nfunction prepShaderSource(shaderSource) {\r\n  let lineOffset = 0;\r\n  if (spaceRE.test(shaderSource)) {\r\n    lineOffset = 1;\r\n    shaderSource = shaderSource.replace(spaceRE, '');\r\n  }\r\n  return {lineOffset, shaderSource};\r\n}\r\n\r\n/**\r\n * @param {module:twgl.ProgramOptions} progOptions\r\n * @param {string} msg\r\n * @return null\r\n * @private\r\n */\r\nfunction reportError(progOptions, msg) {\r\n  progOptions.errorCallback(msg);\r\n  if (progOptions.callback) {\r\n    setTimeout(() => {\r\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\r\n    });\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Check Shader status\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {number} shaderType The shader type\r\n * @param {WebGLShader} shader The shader\r\n * @param {ErrorCallback} [errFn] function to receive error message.\r\n * @return {string} errors or empty string\r\n * @private\r\n */\r\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\r\n  errFn = errFn || error;\r\n  // Check the compile status\r\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\r\n  if (!compiled) {\r\n    // Something went wrong during compilation; get the error\r\n    const lastError = gl.getShaderInfoLog(shader);\r\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\r\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`;\r\n    errFn(error);\r\n    return error;\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @typedef {Object} FullProgramSpec\r\n * @property {string[]} shaders the shader source or element ids.\r\n * @property {function(string)} [errorCallback] callback for errors\r\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\r\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\r\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\r\n *   you can pass an array of names.\r\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\r\n * @property {ProgramCallback} [callback] callback for async program compilation.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * @typedef {Object} ProgramOptions\r\n * @property {function(string)} [errorCallback] callback for errors\r\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\r\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\r\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\r\n *   you can pass an array of names.\r\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\r\n * @property {ProgramCallback} [callback] callback for async program compilation.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Gets the program options based on all these optional arguments\r\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\r\n * @private\r\n */\r\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\r\n  let transformFeedbackVaryings;\r\n  let transformFeedbackMode;\r\n  let callback;\r\n  if (typeof opt_locations === 'function') {\r\n    opt_errorCallback = opt_locations;\r\n    opt_locations = undefined;\r\n  }\r\n  if (typeof opt_attribs === 'function') {\r\n    opt_errorCallback = opt_attribs;\r\n    opt_attribs = undefined;\r\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\r\n    const opt = opt_attribs;\r\n    opt_errorCallback = opt.errorCallback;\r\n    opt_attribs = opt.attribLocations;\r\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\r\n    transformFeedbackMode = opt.transformFeedbackMode;\r\n    callback = opt.callback;\r\n  }\r\n\r\n  const errorCallback = opt_errorCallback || error;\r\n  const errors = [];\r\n  const options = {\r\n    errorCallback(msg, ...args) {\r\n      errors.push(msg);\r\n      errorCallback(msg, ...args);\r\n    },\r\n    transformFeedbackVaryings,\r\n    transformFeedbackMode,\r\n    callback,\r\n    errors,\r\n  };\r\n\r\n  {\r\n    let attribLocations = {};\r\n    if (Array.isArray(opt_attribs)) {\r\n      opt_attribs.forEach(function(attrib,  ndx) {\r\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\r\n      });\r\n    } else {\r\n      attribLocations = opt_attribs || {};\r\n    }\r\n    options.attribLocations = attribLocations;\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\nconst defaultShaderType = [\r\n  \"VERTEX_SHADER\",\r\n  \"FRAGMENT_SHADER\",\r\n];\r\n\r\nfunction getShaderTypeFromScriptType(gl, scriptType) {\r\n  if (scriptType.indexOf(\"frag\") >= 0) {\r\n    return FRAGMENT_SHADER;\r\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\r\n    return VERTEX_SHADER;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction deleteProgramAndShaders(gl, program, notThese) {\r\n  const shaders = gl.getAttachedShaders(program);\r\n  for (const shader of shaders) {\r\n    if (notThese.has(shader)) {\r\n      gl.deleteShader(shader);\r\n    }\r\n  }\r\n  gl.deleteProgram(program);\r\n}\r\n\r\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction createProgramNoCheck(gl, shaders, programOptions) {\r\n  const program = gl.createProgram();\r\n  const {\r\n    attribLocations,\r\n    transformFeedbackVaryings,\r\n    transformFeedbackMode,\r\n  } = getProgramOptions(programOptions);\r\n\r\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\r\n    let shader = shaders[ndx];\r\n    if (typeof shader === 'string') {\r\n      const elem = getElementById(shader);\r\n      const src = elem ? elem.text : shader;\r\n      let type = gl[defaultShaderType[ndx]];\r\n      if (elem && elem.type) {\r\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\r\n      }\r\n      shader = gl.createShader(type);\r\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\r\n      gl.compileShader(shader);\r\n      gl.attachShader(program, shader);\r\n    }\r\n  }\r\n\r\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\r\n\r\n  {\r\n    let varyings = transformFeedbackVaryings;\r\n    if (varyings) {\r\n      if (varyings.attribs) {\r\n        varyings = varyings.attribs;\r\n      }\r\n      if (!Array.isArray(varyings)) {\r\n        varyings = Object.keys(varyings);\r\n      }\r\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\r\n    }\r\n  }\r\n\r\n  gl.linkProgram(program);\r\n  return program;\r\n}\r\n\r\n/**\r\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\r\n * program.\r\n *\r\n * NOTE: There are 4 signatures for this function\r\n *\r\n *     twgl.createProgram(gl, [vs, fs], options);\r\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\r\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\r\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createProgram(\r\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\r\n  // This code is really convoluted, because it may or may not be async\r\n  // Maybe it would be better to have a separate function\r\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\r\n  const shaderSet = new Set(shaders);\r\n  const program = createProgramNoCheck(gl, shaders, progOptions);\r\n\r\n  function hasErrors(gl, program) {\r\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\r\n    if (errors) {\r\n      deleteProgramAndShaders(gl, program, shaderSet);\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  if (progOptions.callback) {\r\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\r\n      const errors = hasErrors(gl, program);\r\n      progOptions.callback(errors, errors ? undefined : program);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  return hasErrors(gl, program) ? undefined : program;\r\n}\r\n\r\n/**\r\n * This only works because the functions it wraps the first 2 arguments\r\n * are gl and any, followed by things that become programOptions\r\n * @private\r\n */\r\nfunction wrapCallbackFnToAsyncFn(fn) {\r\n  return function(gl, arg1, ...args) {\r\n    return new Promise((resolve, reject) => {\r\n      const programOptions = getProgramOptions(...args);\r\n      programOptions.callback = (err, program) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(program);\r\n        }\r\n      };\r\n      fn(gl, arg1, programOptions);\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Same as createProgram but returns a promise\r\n *\r\n * NOTE: There are 4 signatures for this function\r\n *\r\n *     twgl.createProgramAsync(gl, [vs, fs], options);\r\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\r\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\r\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\r\n *\r\n * @function\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {Promise<WebGLProgram>} The created program\r\n * @memberOf module:twgl/programs\r\n */\r\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\r\n\r\n/**\r\n * Same as createProgramInfo but returns a promise\r\n * @function\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderSources Array of sources for the\r\n *        shaders or ids. The first is assumed to be the vertex shader,\r\n *        the second the fragment shader.\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\r\n * @memberOf module:twgl/programs\r\n */\r\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\r\n\r\nasync function waitForProgramLinkCompletionAsync(gl, program) {\r\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\r\n  const checkFn = ext\r\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\r\n      : () => true;\r\n\r\n  let waitTime = 0;\r\n  do {\r\n    await wait(waitTime);  // must wait at least once\r\n    waitTime = 1000 / 60;\r\n  } while (!checkFn(gl, program));\r\n}\r\n\r\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\r\n  for (const program of Object.values(programs)) {\r\n    await waitForProgramLinkCompletionAsync(gl, program);\r\n  }\r\n}\r\n\r\n/**\r\n * Check a program's link status\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLProgram} program Program to check\r\n * @param {ErrorCallback} [errFn] func for errors\r\n * @return {string?} errors if program is failed, else undefined\r\n * @private\r\n */\r\nfunction getProgramErrors(gl, program, errFn) {\r\n  errFn = errFn || error;\r\n  // Check the link status\r\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\r\n  if (!linked) {\r\n    // something went wrong with the link\r\n    const lastError = gl.getProgramInfoLog(program);\r\n    errFn(`Error in program linking: ${lastError}`);\r\n    // print any errors from these shaders\r\n    const shaders = gl.getAttachedShaders(program);\r\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\r\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Creates a program from 2 script tags.\r\n *\r\n * NOTE: There are 4 signatures for this function\r\n *\r\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\r\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\r\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\r\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderScriptIds Array of ids of the script\r\n *        tags for the shaders. The first is assumed to be the\r\n *        vertex shader, the second the fragment shader.\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createProgramFromScripts(\r\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\r\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\r\n  const shaders = [];\r\n  for (const scriptId of shaderScriptIds) {\r\n    const shaderScript = getElementById(scriptId);\r\n    if (!shaderScript) {\r\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\r\n    }\r\n    shaders.push(shaderScript.text);\r\n  }\r\n  return createProgram(gl, shaders, progOptions);\r\n}\r\n\r\n/**\r\n * Creates a program from 2 sources.\r\n *\r\n * NOTE: There are 4 signatures for this function\r\n *\r\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\r\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\r\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\r\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderSources Array of sources for the\r\n *        shaders. The first is assumed to be the vertex shader,\r\n *        the second the fragment shader.\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createProgramFromSources(\r\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\r\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\r\n}\r\n\r\n/**\r\n * Returns true if attribute/uniform is a reserved/built in\r\n *\r\n * It makes no sense to me why GL returns these because it's\r\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\r\n * with names that start with `gl_` (and `webgl_` in WebGL)\r\n *\r\n * I can only assume they are there because they might count\r\n * when computing the number of uniforms/attributes used when you want to\r\n * know if you are near the limit. That doesn't really make sense\r\n * to me but the fact that these get returned are in the spec.\r\n *\r\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\r\n *    `gl.getActiveAttrib`.\r\n * @return {bool} true if it's reserved\r\n * @private\r\n */\r\nfunction isBuiltIn(info) {\r\n  const name = info.name;\r\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\r\n}\r\n\r\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\r\nconst isDigit = s => s >= '0' && s <= '9';\r\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\r\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\r\n  let tokenNdx = 0;\r\n  let path = '';\r\n\r\n  for (;;) {\r\n    const token = tokens[tokenNdx++];  // has to be name or number\r\n    path += token;\r\n    const isArrayIndex = isDigit(token[0]);\r\n    const accessor = isArrayIndex\r\n        ? parseInt(token)\r\n        : token;\r\n    if (isArrayIndex) {\r\n      path += tokens[tokenNdx++];  // skip ']'\r\n    }\r\n    const isLastToken = tokenNdx === tokens.length;\r\n    if (isLastToken) {\r\n      node[accessor] = setter;\r\n      break;\r\n    } else {\r\n      const token = tokens[tokenNdx++];  // has to be . or [\r\n      const isArray = token === '[';\r\n      const child = node[accessor] || (isArray ? [] : {});\r\n      node[accessor] = child;\r\n      node = child;\r\n      uniformSetters[path] = uniformSetters[path] || function(node) {\r\n        return function(value) {\r\n          setUniformTree(node, value);\r\n        };\r\n      }(child);\r\n      path += token;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates setter functions for all uniforms of a shader\r\n * program.\r\n *\r\n * @see {@link module:twgl.setUniforms}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLProgram} program the program to create setters for.\r\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createUniformSetters(gl, program) {\r\n  let textureUnit = 0;\r\n\r\n  /**\r\n   * Creates a setter for a uniform of the given program with it's\r\n   * location embedded in the setter.\r\n   * @param {WebGLProgram} program\r\n   * @param {WebGLUniformInfo} uniformInfo\r\n   * @returns {function} the created setter.\r\n   */\r\n  function createUniformSetter(program, uniformInfo, location) {\r\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\r\n    const type = uniformInfo.type;\r\n    const typeInfo = typeMap[type];\r\n    if (!typeInfo) {\r\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\r\n    }\r\n    let setter;\r\n    if (typeInfo.bindPoint) {\r\n      // it's a sampler\r\n      const unit = textureUnit;\r\n      textureUnit += uniformInfo.size;\r\n      if (isArray) {\r\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\r\n      } else {\r\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\r\n      }\r\n    } else {\r\n      if (typeInfo.arraySetter && isArray) {\r\n        setter = typeInfo.arraySetter(gl, location);\r\n      } else {\r\n        setter = typeInfo.setter(gl, location);\r\n      }\r\n    }\r\n    setter.location = location;\r\n    return setter;\r\n  }\r\n\r\n  const uniformSetters = {};\r\n  const uniformTree = {};\r\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\r\n\r\n  for (let ii = 0; ii < numUniforms; ++ii) {\r\n    const uniformInfo = gl.getActiveUniform(program, ii);\r\n    if (isBuiltIn(uniformInfo)) {\r\n      continue;\r\n    }\r\n    let name = uniformInfo.name;\r\n    // remove the array suffix.\r\n    if (name.endsWith(\"[0]\")) {\r\n      name = name.substr(0, name.length - 3);\r\n    }\r\n    const location = gl.getUniformLocation(program, uniformInfo.name);\r\n    // the uniform will have no location if it's in a uniform block\r\n    if (location) {\r\n      const setter = createUniformSetter(program, uniformInfo, location);\r\n      uniformSetters[name] = setter;\r\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\r\n    }\r\n  }\r\n\r\n  return uniformSetters;\r\n}\r\n\r\n/**\r\n * @typedef {Object} TransformFeedbackInfo\r\n * @property {number} index index of transform feedback\r\n * @property {number} type GL type\r\n * @property {number} size 1 - 4\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLProgram} program an existing WebGLProgram.\r\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\r\n * @memberOf module:twgl\r\n */\r\nfunction createTransformFeedbackInfo(gl, program) {\r\n  const info = {};\r\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\r\n  for (let ii = 0; ii < numVaryings; ++ii) {\r\n    const varying = gl.getTransformFeedbackVarying(program, ii);\r\n    info[varying.name] = {\r\n      index: ii,\r\n      type: varying.type,\r\n      size: varying.size,\r\n    };\r\n  }\r\n  return info;\r\n}\r\n\r\n/**\r\n * Binds buffers for transform feedback.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\r\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\r\n * @memberOf module:twgl\r\n */\r\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\r\n  if (transformFeedbackInfo.transformFeedbackInfo) {\r\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\r\n  }\r\n  if (bufferInfo.attribs) {\r\n    bufferInfo = bufferInfo.attribs;\r\n  }\r\n  for (const name in bufferInfo) {\r\n    const varying = transformFeedbackInfo[name];\r\n    if (varying) {\r\n      const buf = bufferInfo[name];\r\n      if (buf.offset) {\r\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\r\n      } else {\r\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a transform feedback and sets the buffers\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\r\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\r\n * @return {WebGLTransformFeedback} the created transform feedback\r\n * @memberOf module:twgl\r\n */\r\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\r\n  const tf = gl.createTransformFeedback();\r\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\r\n  gl.useProgram(programInfo.program);\r\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\r\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\r\n  return tf;\r\n}\r\n\r\n/**\r\n * @typedef {Object} UniformData\r\n * @property {string} name The name of the uniform\r\n * @property {number} type The WebGL type enum for this uniform\r\n * @property {number} size The number of elements for this uniform\r\n * @property {number} blockNdx The block index this uniform appears in\r\n * @property {number} offset The byte offset in the block for this uniform's value\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * The specification for one UniformBlockObject\r\n *\r\n * @typedef {Object} BlockSpec\r\n * @property {number} index The index of the block.\r\n * @property {number} size The size in bytes needed for the block\r\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\r\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\r\n * @property {bool} usedByVertexShader Self explanatory\r\n * @property {bool} usedByFragmentShader Self explanatory\r\n * @property {bool} used Self explanatory\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * A `UniformBlockSpec` represents the data needed to create and bind\r\n * UniformBlockObjects for a given program\r\n *\r\n * @typedef {Object} UniformBlockSpec\r\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\r\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a UniformBlockSpec for the given program.\r\n *\r\n * A UniformBlockSpec represents the data needed to create and bind\r\n * UniformBlockObjects\r\n *\r\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\r\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\r\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createUniformBlockSpecFromProgram(gl, program) {\r\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\r\n  const uniformData = [];\r\n  const uniformIndices = [];\r\n\r\n  for (let ii = 0; ii < numUniforms; ++ii) {\r\n    uniformIndices.push(ii);\r\n    uniformData.push({});\r\n    const uniformInfo = gl.getActiveUniform(program, ii);\r\n    uniformData[ii].name = uniformInfo.name;\r\n  }\r\n\r\n  [\r\n    [ \"UNIFORM_TYPE\", \"type\" ],\r\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\r\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\r\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\r\n  ].forEach(function(pair) {\r\n    const pname = pair[0];\r\n    const key = pair[1];\r\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\r\n      uniformData[ndx][key] = value;\r\n    });\r\n  });\r\n\r\n  const blockSpecs = {};\r\n\r\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\r\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\r\n    const name = gl.getActiveUniformBlockName(program, ii);\r\n    const blockSpec = {\r\n      index: gl.getUniformBlockIndex(program, name),\r\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\r\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\r\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\r\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\r\n    };\r\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\r\n    blockSpecs[name] = blockSpec;\r\n  }\r\n\r\n  return {\r\n    blockSpecs: blockSpecs,\r\n    uniformData: uniformData,\r\n  };\r\n}\r\n\r\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\r\n\r\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\r\n\r\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\r\n  if (isArray || rows) {\r\n    cols = cols || 1;\r\n    const numElements = view.length;\r\n    const totalRows = numElements / 4;\r\n    return function(value) {\r\n      let dst = 0;\r\n      let src = 0;\r\n      for (let row = 0; row < totalRows; ++row) {\r\n        for (let col = 0; col < cols; ++col) {\r\n          view[dst++] = value[src++];\r\n        }\r\n        dst += 4 - cols;\r\n      }\r\n    };\r\n  } else {\r\n    return function(value) {\r\n      if (value.length) {\r\n        view.set(value);\r\n      } else {\r\n        view[0] = value;\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\r\n * and a corresponding WebGLBuffer to hold those values on the GPU\r\n *\r\n * @typedef {Object} UniformBlockInfo\r\n * @property {string} name The name of the block\r\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\r\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\r\n *    inspecting the contents of the buffer in the debugger.\r\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\r\n * @property {number} [offset] offset into buffer\r\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\r\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\r\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\r\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\r\n *   `Int32Array` view, etc.\r\n * @property {Object<string, function>} setters A setter for this uniform.\r\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\r\n *   means if you want to set an array of 4 floats you'd need to set 16 values\r\n *   (or set elements 0, 4, 8, 12). In other words\r\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\r\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\r\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\r\n *   or via {@link module:twgl.setBlockUniforms}\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a `UniformBlockInfo` for the specified block\r\n *\r\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\r\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\r\n * it is common to comment out large portions of a shader or for example set\r\n * the final output to a constant. When that happens blocks get optimized out.\r\n * If this function did not create dummy blocks your code would crash when debugging.\r\n *\r\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\r\n * @param {WebGLProgram} program A WebGLProgram\r\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\r\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\r\n * @param {string} blockName The name of the block.\r\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\r\n  const blockSpecs = uniformBlockSpec.blockSpecs;\r\n  const uniformData = uniformBlockSpec.uniformData;\r\n  const blockSpec = blockSpecs[blockName];\r\n  if (!blockSpec) {\r\n    warn(\"no uniform block object named:\", blockName);\r\n    return {\r\n      name: blockName,\r\n      uniforms: {},\r\n    };\r\n  }\r\n  const array = new ArrayBuffer(blockSpec.size);\r\n  const buffer = gl.createBuffer();\r\n  const uniformBufferIndex = blockSpec.index;\r\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\r\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\r\n\r\n  let prefix = blockName + \".\";\r\n  if (arraySuffixRE.test(prefix)) {\r\n    prefix = prefix.replace(arraySuffixRE, \".\");\r\n  }\r\n  const uniforms = {};\r\n  const setters = {};\r\n  const setterTree = {};\r\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\r\n    const data = uniformData[uniformNdx];\r\n    let name = data.name;\r\n    if (name.startsWith(prefix)) {\r\n      name = name.substr(prefix.length);\r\n    }\r\n    const isArray = name.endsWith('[0]');\r\n    if (isArray) {\r\n      name = name.substr(0, name.length - 3);\r\n    }\r\n    const typeInfo = typeMap[data.type];\r\n    const Type = typeInfo.Type;\r\n    const byteLength = isArray\r\n        ? pad(typeInfo.size, 16) * data.size\r\n        : typeInfo.size * data.size;\r\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\r\n    uniforms[name] = uniformView;\r\n    // Note: I'm not sure what to do here. The original\r\n    // idea was to create TypedArray views into each part\r\n    // of the block. This is useful, for example if you have\r\n    // a block with { mat4: model; mat4 view; mat4 projection; }\r\n    // you'll get a Float32Array for each one suitable for\r\n    // passing to most JS math libraries including twgl's and glMatrix.js.\r\n    //\r\n    // But, if you have a an array of structures, especially if that\r\n    // array is large, you get a whole bunch of TypedArray views.\r\n    // Every one of them has overhead and switching between them all\r\n    // is probably a cache miss. In that case it would really be better\r\n    // to just have one view (asFloat) and have all the setters\r\n    // just reference the correct portion. But, then you can't easily\r\n    // treat a matrix, or a vec4, as a standalone thing like you can\r\n    // with all the views.\r\n    //\r\n    // Another problem with the views is they are not shared. With\r\n    // uniforms you have one set of setters. With UniformBlockInfo\r\n    // you have a set of setters *pre block instance*. That's because\r\n    // TypedArray views can't be mapped to different buffers.\r\n    //\r\n    // My gut right now is if you really want the speed and compactness\r\n    // then you should probably roll your own solution. TWGL's goal\r\n    // here is ease of use as AFAICT there is no simple generic efficient\r\n    // solution.\r\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\r\n    setters[name] = setter;\r\n    addSetterToUniformTree(name, setter, setterTree, setters);\r\n  });\r\n  return {\r\n    name: blockName,\r\n    array,\r\n    asFloat: new Float32Array(array),  // for debugging\r\n    buffer,\r\n    uniforms,\r\n    setters,\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a `UniformBlockInfo` for the specified block\r\n *\r\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\r\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\r\n * it is common to comment out large portions of a shader or for example set\r\n * the final output to a constant. When that happens blocks get optimized out.\r\n * If this function did not create dummy blocks your code would crash when debugging.\r\n *\r\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\r\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\r\n *     as returned from {@link module:twgl.createProgramInfo}\r\n * @param {string} blockName The name of the block.\r\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\r\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\r\n}\r\n\r\n/**\r\n * Binds a uniform block to the matching uniform block point.\r\n * Matches by blocks by name so blocks must have the same name not just the same\r\n * structure.\r\n *\r\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\r\n * call {@link module:twgl.setUniformBlock} instead.\r\n *\r\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\r\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\r\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\r\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\r\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\r\n *     {@link module:twgl.createUniformBlockInfo}.\r\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\r\n *     no buffer is bound.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\r\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\r\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\r\n  if (blockSpec) {\r\n    const bufferBindIndex = blockSpec.index;\r\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Uploads the current uniform values to the corresponding WebGLBuffer\r\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\r\n *\r\n * If you haven't changed any values and you only need to bind the uniform block object\r\n * call {@link module:twgl.bindUniformBlock} instead.\r\n *\r\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\r\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\r\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\r\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\r\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\r\n *     {@link module:twgl.createUniformBlockInfo}.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\r\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\r\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets values of a uniform block object\r\n *\r\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\r\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\r\n *    type of uniform. So for example given a block like\r\n *\r\n *       uniform SomeBlock {\r\n *         float someFloat;\r\n *         vec2 someVec2;\r\n *         vec3 someVec3Array[2];\r\n *         int someInt;\r\n *       }\r\n *\r\n *  You can set the values of the uniform block with\r\n *\r\n *       twgl.setBlockUniforms(someBlockInfo, {\r\n *          someFloat: 12.3,\r\n *          someVec2: [1, 2],\r\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\r\n *          someInt: 5,\r\n *       }\r\n *\r\n *  Arrays can be JavaScript arrays or typed arrays\r\n *\r\n *  You can also fill out structure and array values either via\r\n *  shortcut. Example\r\n *\r\n *     // -- in shader --\r\n *     struct Light {\r\n *       float intensity;\r\n *       vec4 color;\r\n *       float nearFar[2];\r\n *     };\r\n *     uniform Lights {\r\n *       Light lights[2];\r\n *     };\r\n *\r\n *     // in JavaScript\r\n *\r\n *     twgl.setBlockUniforms(someBlockInfo, {\r\n *       lights: [\r\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\r\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\r\n *       ],\r\n *     });\r\n *\r\n *   or the more traditional way\r\n *\r\n *     twgl.setBlockUniforms(someBlockInfo, {\r\n *       \"lights[0].intensity\": 5.0,\r\n *       \"lights[0].color\": [1, 0, 0, 1],\r\n *       \"lights[0].nearFar\": [0.1, 10],\r\n *       \"lights[1].intensity\": 2.0,\r\n *       \"lights[1].color\": [0, 0, 1, 1],\r\n *       \"lights[1].nearFar\": [0.2, 15],\r\n *     });\r\n *\r\n *   You can also specify partial paths\r\n *\r\n *     twgl.setBlockUniforms(someBlockInfo, {\r\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\r\n *     });\r\n *\r\n *   But you can not specify leaf array indices.\r\n *\r\n *     twgl.setBlockUniforms(someBlockInfo, {\r\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\r\n *       'lights[1].nearFar': [0.2, 15], // GOOD\r\n *     });\r\n *\r\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\r\n *  For example the actual layout of `someVec3Array` above in memory\r\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\r\n *  as shown about and copies them, skipping the padding. This might\r\n *  be confusing if you're already familiar with Uniform blocks.\r\n *\r\n *  If you want to deal with the padding yourself you can access the array\r\n *  buffer views directly. eg:\r\n *\r\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\r\n *\r\n *  Any name that doesn't match will be ignored\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction setBlockUniforms(uniformBlockInfo, values) {\r\n  const setters = uniformBlockInfo.setters;\r\n  for (const name in values) {\r\n    const setter = setters[name];\r\n    if (setter) {\r\n      const value = values[name];\r\n      setter(value);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setUniformTree(tree, values) {\r\n  for (const name in values) {\r\n    const prop = tree[name];\r\n    if (typeof prop === 'function') {\r\n      prop(values[name]);\r\n    } else {\r\n      setUniformTree(tree[name], values[name]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Set uniforms and binds related textures.\r\n *\r\n * example:\r\n *\r\n *     const programInfo = createProgramInfo(\r\n *         gl, [\"some-vs\", \"some-fs\"]);\r\n *\r\n *     const tex1 = gl.createTexture();\r\n *     const tex2 = gl.createTexture();\r\n *\r\n *     ... assume we setup the textures with data ...\r\n *\r\n *     const uniforms = {\r\n *       u_someSampler: tex1,\r\n *       u_someOtherSampler: tex2,\r\n *       u_someColor: [1,0,0,1],\r\n *       u_somePosition: [0,1,1],\r\n *       u_someMatrix: [\r\n *         1,0,0,0,\r\n *         0,1,0,0,\r\n *         0,0,1,0,\r\n *         0,0,0,0,\r\n *       ],\r\n *     };\r\n *\r\n *     gl.useProgram(programInfo.program);\r\n *\r\n * This will automatically bind the textures AND set the\r\n * uniforms.\r\n *\r\n *     twgl.setUniforms(programInfo, uniforms);\r\n *\r\n * For the example above it is equivalent to\r\n *\r\n *     let texUnit = 0;\r\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\r\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\r\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\r\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\r\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\r\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\r\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\r\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\r\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\r\n *         1,0,0,0,\r\n *         0,1,0,0,\r\n *         0,0,1,0,\r\n *         0,0,0,0,\r\n *       ]);\r\n *\r\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\r\n *\r\n *     const uniforms = {\r\n *       u_someSampler: tex1,\r\n *       u_someOtherSampler: tex2,\r\n *     };\r\n *\r\n *     const moreUniforms {\r\n *       u_someColor: [1,0,0,1],\r\n *       u_somePosition: [0,1,1],\r\n *       u_someMatrix: [\r\n *         1,0,0,0,\r\n *         0,1,0,0,\r\n *         0,0,1,0,\r\n *         0,0,0,0,\r\n *       ],\r\n *     };\r\n *\r\n *     twgl.setUniforms(programInfo, uniforms);\r\n *     twgl.setUniforms(programInfo, moreUniforms);\r\n *\r\n * You can also add WebGLSamplers to uniform samplers as in\r\n *\r\n *     const uniforms = {\r\n *       u_someSampler: {\r\n *         texture: someWebGLTexture,\r\n *         sampler: someWebGLSampler,\r\n *       },\r\n *     };\r\n *\r\n * In which case both the sampler and texture will be bound to the\r\n * same unit.\r\n *\r\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\r\n *        `createUniformSetters`.\r\n * @param {Object.<string, ?>} values an object with values for the\r\n *        uniforms.\r\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\r\n *\r\n *     const sharedUniforms = {\r\n *       u_fogNear: 10,\r\n *       u_projection: ...\r\n *       ...\r\n *     };\r\n *\r\n *     const localUniforms = {\r\n *       u_world: ...\r\n *       u_diffuseColor: ...\r\n *     };\r\n *\r\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\r\n *\r\n *     // is the same as\r\n *\r\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\r\n *\r\n *     // is the same as\r\n *\r\n *     twgl.setUniforms(programInfo, sharedUniforms);\r\n *     twgl.setUniforms(programInfo, localUniforms};\r\n *\r\n *   You can also fill out structure and array values either via\r\n *   shortcut. Example\r\n *\r\n *     // -- in shader --\r\n *     struct Light {\r\n *       float intensity;\r\n *       vec4 color;\r\n *       float nearFar[2];\r\n *     };\r\n *     uniform Light lights[2];\r\n *\r\n *     // in JavaScript\r\n *\r\n *     twgl.setUniforms(programInfo, {\r\n *       lights: [\r\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\r\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\r\n *       ],\r\n *     });\r\n *\r\n *   or the more traditional way\r\n *\r\n *     twgl.setUniforms(programInfo, {\r\n *       \"lights[0].intensity\": 5.0,\r\n *       \"lights[0].color\": [1, 0, 0, 1],\r\n *       \"lights[0].nearFar\": [0.1, 10],\r\n *       \"lights[1].intensity\": 2.0,\r\n *       \"lights[1].color\": [0, 0, 1, 1],\r\n *       \"lights[1].nearFar\": [0.2, 15],\r\n *     });\r\n *\r\n *   You can also specify partial paths\r\n *\r\n *     twgl.setUniforms(programInfo, {\r\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\r\n *     });\r\n *\r\n *   But you can not specify leaf array indices\r\n *\r\n *     twgl.setUniforms(programInfo, {\r\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\r\n *       'lights[1].nearFar': [0.2, 15], // GOOD\r\n *     });\r\n *\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\r\n  const actualSetters = setters.uniformSetters || setters;\r\n  const numArgs = args.length;\r\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\r\n    const values = args[aNdx];\r\n    if (Array.isArray(values)) {\r\n      const numValues = values.length;\r\n      for (let ii = 0; ii < numValues; ++ii) {\r\n        setUniforms(actualSetters, values[ii]);\r\n      }\r\n    } else {\r\n      for (const name in values) {\r\n        const setter = actualSetters[name];\r\n        if (setter) {\r\n          setter(values[name]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Alias for `setUniforms`\r\n * @function\r\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\r\n *        `createUniformSetters`.\r\n * @param {Object.<string, ?>} values an object with values for the\r\n * @memberOf module:twgl/programs\r\n */\r\nconst setUniformsAndBindTextures = setUniforms;\r\n\r\n/**\r\n * Creates setter functions for all attributes of a shader\r\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\r\n *\r\n * @see {@link module:twgl.setAttributes} for example\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {WebGLProgram} program the program to create setters for.\r\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createAttributeSetters(gl, program) {\r\n  const attribSetters = {\r\n  };\r\n\r\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\r\n  for (let ii = 0; ii < numAttribs; ++ii) {\r\n    const attribInfo = gl.getActiveAttrib(program, ii);\r\n    if (isBuiltIn(attribInfo)) {\r\n      continue;\r\n    }\r\n    const index = gl.getAttribLocation(program, attribInfo.name);\r\n    const typeInfo = attrTypeMap[attribInfo.type];\r\n    const setter = typeInfo.setter(gl, index, typeInfo);\r\n    setter.location = index;\r\n    attribSetters[attribInfo.name] = setter;\r\n  }\r\n\r\n  return attribSetters;\r\n}\r\n\r\n/**\r\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\r\n *\r\n * Example:\r\n *\r\n *     const program = createProgramFromScripts(\r\n *         gl, [\"some-vs\", \"some-fs\");\r\n *\r\n *     const attribSetters = createAttributeSetters(program);\r\n *\r\n *     const positionBuffer = gl.createBuffer();\r\n *     const texcoordBuffer = gl.createBuffer();\r\n *\r\n *     const attribs = {\r\n *       a_position: {buffer: positionBuffer, numComponents: 3},\r\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\r\n *     };\r\n *\r\n *     gl.useProgram(program);\r\n *\r\n * This will automatically bind the buffers AND set the\r\n * attributes.\r\n *\r\n *     setAttributes(attribSetters, attribs);\r\n *\r\n * Properties of attribs. For each attrib you can add\r\n * properties:\r\n *\r\n * *   type: the type of data in the buffer. Default = gl.FLOAT\r\n * *   normalize: whether or not to normalize the data. Default = false\r\n * *   stride: the stride. Default = 0\r\n * *   offset: offset into the buffer. Default = 0\r\n * *   divisor: the divisor for instances. Default = undefined\r\n *\r\n * For example if you had 3 value float positions, 2 value\r\n * float texcoord and 4 value uint8 colors you'd setup your\r\n * attribs like this\r\n *\r\n *     const attribs = {\r\n *       a_position: {buffer: positionBuffer, numComponents: 3},\r\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\r\n *       a_color: {\r\n *         buffer: colorBuffer,\r\n *         numComponents: 4,\r\n *         type: gl.UNSIGNED_BYTE,\r\n *         normalize: true,\r\n *       },\r\n *     };\r\n *\r\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\r\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\r\n * @memberOf module:twgl/programs\r\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\r\n * @private\r\n */\r\nfunction setAttributes(setters, buffers) {\r\n  for (const name in buffers) {\r\n    const setter = setters[name];\r\n    if (setter) {\r\n      setter(buffers[name]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\r\n *\r\n * Example:\r\n *\r\n *     const programInfo = createProgramInfo(\r\n *         gl, [\"some-vs\", \"some-fs\");\r\n *\r\n *     const arrays = {\r\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\r\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\r\n *     };\r\n *\r\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\r\n *\r\n *     gl.useProgram(programInfo.program);\r\n *\r\n * This will automatically bind the buffers AND set the\r\n * attributes.\r\n *\r\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\r\n *\r\n * For the example above it is equivalent to\r\n *\r\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n *     gl.enableVertexAttribArray(a_positionLocation);\r\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\r\n *     gl.enableVertexAttribArray(a_texcoordLocation);\r\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\r\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\r\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\r\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\r\n  if (buffers.vertexArrayObject) {\r\n    gl.bindVertexArray(buffers.vertexArrayObject);\r\n  } else {\r\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\r\n    if (buffers.indices) {\r\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} ProgramInfo\r\n * @property {WebGLProgram} program A shader program\r\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\r\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\r\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\r\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a ProgramInfo from an existing program.\r\n *\r\n * A ProgramInfo contains\r\n *\r\n *     programInfo = {\r\n *        program: WebGLProgram,\r\n *        uniformSetters: object of setters as returned from createUniformSetters,\r\n *        attribSetters: object of setters as returned from createAttribSetters,\r\n *     }\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {WebGLProgram} program an existing WebGLProgram.\r\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createProgramInfoFromProgram(gl, program) {\r\n  const uniformSetters = createUniformSetters(gl, program);\r\n  const attribSetters = createAttributeSetters(gl, program);\r\n  const programInfo = {\r\n    program,\r\n    uniformSetters,\r\n    attribSetters,\r\n  };\r\n\r\n  if (isWebGL2(gl)) {\r\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\r\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\r\n  }\r\n\r\n  return programInfo;\r\n}\r\n\r\nconst notIdRE = /\\s|{|}|;/;\r\n\r\n/**\r\n * Creates a ProgramInfo from 2 sources.\r\n *\r\n * A ProgramInfo contains\r\n *\r\n *     programInfo = {\r\n *        program: WebGLProgram,\r\n *        uniformSetters: object of setters as returned from createUniformSetters,\r\n *        attribSetters: object of setters as returned from createAttribSetters,\r\n *     }\r\n *\r\n * NOTE: There are 4 signatures for this function\r\n *\r\n *     twgl.createProgramInfo(gl, [vs, fs], options);\r\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\r\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\r\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {string[]} shaderSources Array of sources for the\r\n *        shaders or ids. The first is assumed to be the vertex shader,\r\n *        the second the fragment shader.\r\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\r\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\r\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\r\n *        on error. If you want something else pass an callback. It's passed an error message.\r\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\r\n * @memberOf module:twgl/programs\r\n */\r\nfunction createProgramInfo(\r\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\r\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\r\n  const errors = [];\r\n  shaderSources = shaderSources.map(function(source) {\r\n    // Lets assume if there is no \\n it's an id\r\n    if (!notIdRE.test(source)) {\r\n      const script = getElementById(source);\r\n      if (!script) {\r\n        const err = `no element with id: ${source}`;\r\n        progOptions.errorCallback(err);\r\n        errors.push(err);\r\n      } else {\r\n        source = script.text;\r\n      }\r\n    }\r\n    return source;\r\n  });\r\n\r\n  if (errors.length) {\r\n    return reportError(progOptions, '');\r\n  }\r\n\r\n  const origCallback = progOptions.callback;\r\n  if (origCallback) {\r\n    progOptions.callback = (err, program) => {\r\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\r\n    };\r\n  }\r\n\r\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\r\n  if (!program) {\r\n    return null;\r\n  }\r\n\r\n  return createProgramInfoFromProgram(gl, program);\r\n}\r\n\r\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\r\n  // check errors for everything.\r\n  for (const [name, program] of Object.entries(programs)) {\r\n    const options = {...programOptions};\r\n    const spec = programSpecs[name];\r\n    if (!Array.isArray(spec)) {\r\n      Object.assign(options, spec);\r\n    }\r\n    const errors = getProgramErrors(gl, program, options.errorCallback);\r\n    if (errors) {\r\n      // delete everything we created\r\n      for (const program of Object.values(programs)) {\r\n        const shaders = gl.getAttachedShaders(program);\r\n        gl.deleteProgram(program);\r\n        for (const shader of shaders) {\r\n          // Don't delete it if we didn't create it.\r\n          if (!noDeleteShadersSet.has(shader)) {\r\n            gl.deleteShader(shader);\r\n          }\r\n        }\r\n      }\r\n      return errors;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Creates multiple programs\r\n *\r\n * Note: the reason this function exists is because the fastest way to create multiple\r\n * programs in WebGL is to create and compile all shaders and link all programs and only\r\n * afterwards check if they succeeded. In that way, giving all your shaders\r\n *\r\n * @see {@link module:twgl.createProgram}\r\n *\r\n * Example:\r\n *\r\n *     const programs = twgl.createPrograms(gl, {\r\n *       lambert: [lambertVS, lambertFS],\r\n *       phong: [phongVS, phoneFS],\r\n *       particles: {\r\n *         shaders: [particlesVS, particlesFS],\r\n *         transformFeedbackVaryings: ['position', 'velocity'],\r\n *       },\r\n *     });\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\r\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\r\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\r\n */\r\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\r\n  // Remember existing shaders so that if there is an error we don't delete them\r\n  const noDeleteShadersSet = new Set();\r\n\r\n  // compile and link everything\r\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\r\n    const options = {...programOptions};\r\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\r\n    if (!Array.isArray(spec)) {\r\n      Object.assign(options, spec);\r\n    }\r\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\r\n    return [name, createProgramNoCheck(gl, shaders, options)];\r\n  }));\r\n\r\n  if (programOptions.callback) {\r\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\r\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\r\n      programOptions.callback(errors, errors ? undefined : programs);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\r\n  return errors ? undefined : programs;\r\n}\r\n\r\n/**\r\n * Creates multiple programInfos\r\n *\r\n * Note: the reason this function exists is because the fastest way to create multiple\r\n * programs in WebGL is to create and compile all shaders and link all programs and only\r\n * afterwards check if they succeeded. In that way, giving all your shaders\r\n *\r\n * @see {@link module:twgl.createProgramInfo}\r\n *\r\n * Examples:\r\n *\r\n *     const programInfos = twgl.createProgramInfos(gl, {\r\n *       lambert: [lambertVS, lambertFS],\r\n *       phong: [phongVS, phoneFS],\r\n *       particles: {\r\n *         shaders: [particlesVS, particlesFS],\r\n *         transformFeedbackVaryings: ['position', 'velocity'],\r\n *       },\r\n *     });\r\n *\r\n * or\r\n *\r\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\r\n *       lambert: [lambertVS, lambertFS],\r\n *       phong: [phongVS, phoneFS],\r\n *       particles: {\r\n *         shaders: [particlesVS, particlesFS],\r\n *         transformFeedbackVaryings: ['position', 'velocity'],\r\n *       },\r\n *     });\r\n *\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\r\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\r\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\r\n */\r\nfunction createProgramInfos(gl, programSpecs, programOptions) {\r\n  programOptions = getProgramOptions(programOptions);\r\n\r\n  function createProgramInfosForPrograms(gl, programs) {\r\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\r\n      [name, createProgramInfoFromProgram(gl, program)]\r\n    ));\r\n  }\r\n\r\n  const origCallback = programOptions.callback;\r\n  if (origCallback) {\r\n    programOptions.callback = (err, programs) => {\r\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\r\n    };\r\n  }\r\n\r\n  const programs = createPrograms(gl, programSpecs, programOptions);\r\n  if (origCallback || !programs) {\r\n    return undefined;\r\n  }\r\n\r\n  return createProgramInfosForPrograms(gl, programs);\r\n}\r\n\r\n/**\r\n * Creates multiple programs asynchronously\r\n *\r\n * @see {@link module:twgl.createProgramAsync}\r\n *\r\n * Example:\r\n *\r\n *     const programs = await twgl.createProgramsAsync(gl, {\r\n *       lambert: [lambertVS, lambertFS],\r\n *       phong: [phongVS, phoneFS],\r\n *       particles: {\r\n *         shaders: [particlesVS, particlesFS],\r\n *         transformFeedbackVaryings: ['position', 'velocity'],\r\n *       },\r\n *     });\r\n *\r\n * @function\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\r\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\r\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\r\n */\r\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\r\n\r\n/**\r\n * Creates multiple programInfos asynchronously\r\n *\r\n * @see {@link module:twgl.createProgramInfoAsync}\r\n *\r\n * Example:\r\n *\r\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\r\n *       lambert: [lambertVS, lambertFS],\r\n *       phong: [phongVS, phoneFS],\r\n *       particles: {\r\n *         shaders: [particlesVS, particlesFS],\r\n *         transformFeedbackVaryings: ['position', 'velocity'],\r\n *       },\r\n *     });\r\n *\r\n * @function\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\r\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\r\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\r\n */\r\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\r\n\r\nvar programs = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  createAttributeSetters: createAttributeSetters,\r\n  createProgram: createProgram,\r\n  createProgramAsync: createProgramAsync,\r\n  createPrograms: createPrograms,\r\n  createProgramsAsync: createProgramsAsync,\r\n  createProgramFromScripts: createProgramFromScripts,\r\n  createProgramFromSources: createProgramFromSources,\r\n  createProgramInfo: createProgramInfo,\r\n  createProgramInfoAsync: createProgramInfoAsync,\r\n  createProgramInfos: createProgramInfos,\r\n  createProgramInfosAsync: createProgramInfosAsync,\r\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\r\n  createUniformSetters: createUniformSetters,\r\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\r\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\r\n  createUniformBlockInfo: createUniformBlockInfo,\r\n  createTransformFeedback: createTransformFeedback,\r\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\r\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\r\n  setAttributes: setAttributes,\r\n  setBuffersAndAttributes: setBuffersAndAttributes,\r\n  setUniforms: setUniforms,\r\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\r\n  setUniformBlock: setUniformBlock,\r\n  setBlockUniforms: setBlockUniforms,\r\n  bindUniformBlock: bindUniformBlock\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nconst TRIANGLES                      = 0x0004;\r\nconst UNSIGNED_SHORT                 = 0x1403;\r\n\r\n/**\r\n * Drawing related functions\r\n *\r\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\r\n * itself\r\n *\r\n * See {@link module:twgl} for core functions\r\n *\r\n * @module twgl/draw\r\n */\r\n\r\n/**\r\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\r\n *\r\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\r\n * but calling this means if you switch from indexed data to non-indexed\r\n * data you don't have to remember to update your draw call.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\r\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\r\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\r\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\r\n * @param {number} [offset] An optional offset. Defaults to 0.\r\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\r\n * @memberOf module:twgl/draw\r\n */\r\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\r\n  type = type === undefined ? TRIANGLES : type;\r\n  const indices = bufferInfo.indices;\r\n  const elementType = bufferInfo.elementType;\r\n  const numElements = count === undefined ? bufferInfo.numElements : count;\r\n  offset = offset === undefined ? 0 : offset;\r\n  if (elementType || indices) {\r\n    if (instanceCount !== undefined) {\r\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\r\n    } else {\r\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\r\n    }\r\n  } else {\r\n    if (instanceCount !== undefined) {\r\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\r\n    } else {\r\n      gl.drawArrays(type, offset, numElements);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\r\n *\r\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\r\n *\r\n * @typedef {Object} DrawObject\r\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\r\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\r\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\r\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\r\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\r\n * @property {Object<string, ?>} uniforms The values for the uniforms.\r\n *   You can pass multiple objects by putting them in an array. For example\r\n *\r\n *     var sharedUniforms = {\r\n *       u_fogNear: 10,\r\n *       u_projection: ...\r\n *       ...\r\n *     };\r\n *\r\n *     var localUniforms = {\r\n *       u_world: ...\r\n *       u_diffuseColor: ...\r\n *     };\r\n *\r\n *     var drawObj = {\r\n *       ...\r\n *       uniforms: [sharedUniforms, localUniforms],\r\n *     };\r\n *\r\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\r\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\r\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Draws a list of objects\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\r\n * @memberOf module:twgl/draw\r\n */\r\nfunction drawObjectList(gl, objectsToDraw) {\r\n  let lastUsedProgramInfo = null;\r\n  let lastUsedBufferInfo = null;\r\n\r\n  objectsToDraw.forEach(function(object) {\r\n    if (object.active === false) {\r\n      return;\r\n    }\r\n\r\n    const programInfo = object.programInfo;\r\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\r\n    let bindBuffers = false;\r\n    const type = object.type === undefined ? TRIANGLES : object.type;\r\n\r\n    if (programInfo !== lastUsedProgramInfo) {\r\n      lastUsedProgramInfo = programInfo;\r\n      gl.useProgram(programInfo.program);\r\n\r\n      // We have to rebind buffers when changing programs because we\r\n      // only bind buffers the program uses. So if 2 programs use the same\r\n      // bufferInfo but the 1st one uses only positions the when the\r\n      // we switch to the 2nd one some of the attributes will not be on.\r\n      bindBuffers = true;\r\n    }\r\n\r\n    // Setup all the needed attributes.\r\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\r\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\r\n        gl.bindVertexArray(null);\r\n      }\r\n      lastUsedBufferInfo = bufferInfo;\r\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\r\n    }\r\n\r\n    // Set the uniforms.\r\n    setUniforms(programInfo, object.uniforms);\r\n\r\n    // Draw\r\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\r\n  });\r\n\r\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\r\n    gl.bindVertexArray(null);\r\n  }\r\n}\r\n\r\nvar draw = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  drawBufferInfo: drawBufferInfo,\r\n  drawObjectList: drawObjectList\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nconst FRAMEBUFFER                    = 0x8d40;\r\nconst RENDERBUFFER                   = 0x8d41;\r\nconst TEXTURE_2D                     = 0x0de1;\r\n\r\nconst UNSIGNED_BYTE                  = 0x1401;\r\n\r\n/* PixelFormat */\r\nconst DEPTH_COMPONENT                = 0x1902;\r\nconst RGBA                           = 0x1908;\r\nconst DEPTH_COMPONENT24              = 0x81a6;\r\nconst DEPTH_COMPONENT32F             = 0x8cac;\r\nconst DEPTH24_STENCIL8               = 0x88f0;\r\nconst DEPTH32F_STENCIL8              = 0x8cad;\r\n\r\n/* Framebuffer Object. */\r\nconst RGBA4                          = 0x8056;\r\nconst RGB5_A1                        = 0x8057;\r\nconst RGB565                         = 0x8D62;\r\nconst DEPTH_COMPONENT16              = 0x81A5;\r\nconst STENCIL_INDEX                  = 0x1901;\r\nconst STENCIL_INDEX8                 = 0x8D48;\r\nconst DEPTH_STENCIL                  = 0x84F9;\r\nconst COLOR_ATTACHMENT0              = 0x8CE0;\r\nconst DEPTH_ATTACHMENT               = 0x8D00;\r\nconst STENCIL_ATTACHMENT             = 0x8D20;\r\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\r\n\r\n/* TextureWrapMode */\r\nconst CLAMP_TO_EDGE                  = 0x812F;\r\n\r\n/* TextureMagFilter */\r\nconst LINEAR                         = 0x2601;\r\n\r\n/**\r\n * The options for a framebuffer attachment.\r\n *\r\n * Note: For a `format` that is a texture include all the texture\r\n * options from {@link module:twgl.TextureOptions} for example\r\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\r\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\r\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\r\n *\r\n * @typedef {Object} AttachmentOptions\r\n * @property {number} [attachmentPoint] The attachment point. Defaults\r\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\r\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\r\n *   on the format or attachment type.\r\n * @property {number} [format] The format. If one of `gl.RGBA4`,\r\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\r\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\r\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\r\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\r\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\r\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\r\n * @property {number} [samples] The number of samples. Default = 1\r\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\r\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\r\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\r\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\r\n *    If provided will attach this Object. This allows you to share\r\n *    attachments across framebuffers.\r\n * @memberOf module:twgl\r\n * @mixes module:twgl.TextureOptions\r\n */\r\n\r\nconst defaultAttachments = [\r\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\r\n  { format: DEPTH_STENCIL, },\r\n];\r\n\r\nconst attachmentsByFormat = {};\r\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\r\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\r\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\r\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\r\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\r\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\r\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\r\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\r\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\r\n\r\nfunction getAttachmentPointForFormat(format, internalFormat) {\r\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\r\n}\r\n\r\nconst renderbufferFormats = {};\r\nrenderbufferFormats[RGBA4] = true;\r\nrenderbufferFormats[RGB5_A1] = true;\r\nrenderbufferFormats[RGB565] = true;\r\nrenderbufferFormats[DEPTH_STENCIL] = true;\r\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\r\nrenderbufferFormats[STENCIL_INDEX] = true;\r\nrenderbufferFormats[STENCIL_INDEX8] = true;\r\n\r\nfunction isRenderbufferFormat(format) {\r\n  return renderbufferFormats[format];\r\n}\r\n\r\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\r\n\r\nfunction isColorAttachmentPoint(attachmentPoint) {\r\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\r\n}\r\n\r\n/**\r\n * @typedef {Object} FramebufferInfo\r\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\r\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\r\n * @property {number} width The width of the framebuffer and its attachments\r\n * @property {number} height The width of the framebuffer and its attachments\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a framebuffer and attachments.\r\n *\r\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\r\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\r\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\r\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\r\n *\r\n * The simplest usage\r\n *\r\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\r\n *     const fbi = twgl.createFramebufferInfo(gl);\r\n *\r\n * More complex usage\r\n *\r\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\r\n *     const attachments = [\r\n *       { format: RGB565, mag: NEAREST },\r\n *       { format: STENCIL_INDEX8 },\r\n *     ]\r\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\r\n *\r\n * Passing in a specific size\r\n *\r\n *     const width = 256;\r\n *     const height = 256;\r\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\r\n *\r\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\r\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\r\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\r\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\r\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\r\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\r\n * @memberOf module:twgl/framebuffers\r\n */\r\nfunction createFramebufferInfo(gl, attachments, width, height) {\r\n  const target = FRAMEBUFFER;\r\n  const fb = gl.createFramebuffer();\r\n  gl.bindFramebuffer(target, fb);\r\n  width  = width  || gl.drawingBufferWidth;\r\n  height = height || gl.drawingBufferHeight;\r\n  attachments = attachments || defaultAttachments;\r\n  const usedColorAttachmentsPoints = [];\r\n  const framebufferInfo = {\r\n    framebuffer: fb,\r\n    attachments: [],\r\n    width: width,\r\n    height: height,\r\n  };\r\n\r\n  attachments.forEach(function(attachmentOptions, i) {\r\n    let attachment = attachmentOptions.attachment;\r\n    const samples = attachmentOptions.samples;\r\n    const format = attachmentOptions.format;\r\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\r\n    if (!attachmentPoint) {\r\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\r\n    }\r\n    if (isColorAttachmentPoint(attachmentPoint)) {\r\n      usedColorAttachmentsPoints.push(attachmentPoint);\r\n    }\r\n    if (!attachment) {\r\n      if (samples !== undefined || isRenderbufferFormat(format)) {\r\n        attachment = gl.createRenderbuffer();\r\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\r\n        if (samples > 1) {\r\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\r\n        } else {\r\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\r\n        }\r\n      } else {\r\n        const textureOptions = Object.assign({}, attachmentOptions);\r\n        textureOptions.width = width;\r\n        textureOptions.height = height;\r\n        if (textureOptions.auto === undefined) {\r\n          textureOptions.auto = false;\r\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\r\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\r\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\r\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\r\n        }\r\n        attachment = createTexture(gl, textureOptions);\r\n      }\r\n    }\r\n    if (isRenderbuffer(gl, attachment)) {\r\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\r\n    } else if (isTexture(gl, attachment)) {\r\n      if (attachmentOptions.layer !== undefined) {\r\n        gl.framebufferTextureLayer(\r\n          target,\r\n          attachmentPoint,\r\n          attachment,\r\n          attachmentOptions.level || 0,\r\n          attachmentOptions.layer);\r\n      } else {\r\n        gl.framebufferTexture2D(\r\n            target,\r\n            attachmentPoint,\r\n            attachmentOptions.target || TEXTURE_2D,\r\n            attachment,\r\n            attachmentOptions.level || 0);\r\n      }\r\n    } else {\r\n      throw new Error('unknown attachment type');\r\n    }\r\n    framebufferInfo.attachments.push(attachment);\r\n  });\r\n  if (gl.drawBuffers) {\r\n    gl.drawBuffers(usedColorAttachmentsPoints);\r\n  }\r\n  return framebufferInfo;\r\n}\r\n\r\n/**\r\n * Resizes the attachments of a framebuffer.\r\n *\r\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\r\n * because TWGL has no idea the format/type of each attachment.\r\n *\r\n * The simplest usage\r\n *\r\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\r\n *     const fbi = twgl.createFramebufferInfo(gl);\r\n *\r\n *     ...\r\n *\r\n *     function render() {\r\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\r\n *         // resize the attachments\r\n *         twgl.resizeFramebufferInfo(gl, fbi);\r\n *       }\r\n *\r\n * More complex usage\r\n *\r\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\r\n *     const attachments = [\r\n *       { format: RGB565, mag: NEAREST },\r\n *       { format: STENCIL_INDEX8 },\r\n *     ]\r\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\r\n *\r\n *     ...\r\n *\r\n *     function render() {\r\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\r\n *         // resize the attachments to match\r\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\r\n *       }\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\r\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\r\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\r\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\r\n * @memberOf module:twgl/framebuffers\r\n */\r\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\r\n  width  = width  || gl.drawingBufferWidth;\r\n  height = height || gl.drawingBufferHeight;\r\n  framebufferInfo.width = width;\r\n  framebufferInfo.height = height;\r\n  attachments = attachments || defaultAttachments;\r\n  attachments.forEach(function(attachmentOptions, ndx) {\r\n    const attachment = framebufferInfo.attachments[ndx];\r\n    const format = attachmentOptions.format;\r\n    const samples = attachmentOptions.samples;\r\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\r\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\r\n      if (samples > 1) {\r\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\r\n      } else {\r\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\r\n      }\r\n    } else if (isTexture(gl, attachment)) {\r\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\r\n    } else {\r\n      throw new Error('unknown attachment type');\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Binds a framebuffer\r\n *\r\n * This function pretty much solely exists because I spent hours\r\n * trying to figure out why something I wrote wasn't working only\r\n * to realize I forget to set the viewport dimensions.\r\n * My hope is this function will fix that.\r\n *\r\n * It is effectively the same as\r\n *\r\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\r\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\r\n *\r\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\r\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\r\n *   If falsy will bind the canvas.\r\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\r\n * @memberOf module:twgl/framebuffers\r\n */\r\n\r\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\r\n  target = target || FRAMEBUFFER;\r\n  if (framebufferInfo) {\r\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\r\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\r\n  } else {\r\n    gl.bindFramebuffer(target, null);\r\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n  }\r\n}\r\n\r\nvar framebuffers = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  bindFramebufferInfo: bindFramebufferInfo,\r\n  createFramebufferInfo: createFramebufferInfo,\r\n  resizeFramebufferInfo: resizeFramebufferInfo\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * vertex array object related functions\r\n *\r\n * You should generally not need to use these functions. They are provided\r\n * for those cases where you're doing something out of the ordinary\r\n * and you need lower level access.\r\n *\r\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\r\n * itself\r\n *\r\n * See {@link module:twgl} for core functions\r\n *\r\n * @module twgl/vertexArrays\r\n */\r\n\r\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\r\n\r\n/**\r\n * @typedef {Object} VertexArrayInfo\r\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\r\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\r\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\r\n *\r\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\r\n * {@link module:twgl:drawBufferInfo}.\r\n *\r\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\r\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\r\n *   who's attributes use the same attribute locations for the same purposes.\r\n *\r\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\r\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\r\n *\r\n * also\r\n *\r\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\r\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\r\n *   will affect the Vertex Array Object state.\r\n *\r\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\r\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\r\n *\r\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\r\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\r\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\r\n *    now attribute D's location.\r\n *\r\n *    So, you can pass in both shader 1 and shader 2's programInfo\r\n *\r\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\r\n *\r\n * @memberOf module:twgl/vertexArrays\r\n */\r\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\r\n  const vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n  if (!programInfos.length) {\r\n    programInfos = [programInfos];\r\n  }\r\n  programInfos.forEach(function(programInfo) {\r\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\r\n  });\r\n  gl.bindVertexArray(null);\r\n  return {\r\n    numElements: bufferInfo.numElements,\r\n    elementType: bufferInfo.elementType,\r\n    vertexArrayObject: vao,\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a vertex array object and then sets the attributes on it\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\r\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\r\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\r\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\r\n *\r\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\r\n *\r\n * @memberOf module:twgl/vertexArrays\r\n */\r\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\r\n  const vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n  setAttributes(setters, attribs);\r\n  if (indices) {\r\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\r\n  }\r\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\r\n  // like when creating buffers for other stuff will mess up this VAO's binding\r\n  gl.bindVertexArray(null);\r\n  return vao;\r\n}\r\n\r\n/**\r\n * Creates a vertex array object and then sets the attributes\r\n * on it\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\r\n *        to use.\r\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\r\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\r\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\r\n *\r\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\r\n *\r\n * @memberOf module:twgl/vertexArrays\r\n */\r\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\r\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\r\n}\r\n\r\nvar vertexArrays = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  createVertexArrayInfo: createVertexArrayInfo,\r\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\r\n  createVAOFromBufferInfo: createVAOFromBufferInfo\r\n});\r\n\r\n/*\r\n * Copyright 2019 Gregg Tavares\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the \"Software\"),\r\n * to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n */\r\nconst defaults = {\r\n  addExtensionsToContext: true,\r\n};\r\n\r\n/**\r\n * Various default settings for twgl.\r\n *\r\n * Note: You can call this any number of times. Example:\r\n *\r\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\r\n *     twgl.setDefaults({ attribPrefix: 'a_' });\r\n *\r\n * is equivalent to\r\n *\r\n *     twgl.setDefaults({\r\n *       textureColor: [1, 0, 0, 1],\r\n *       attribPrefix: 'a_',\r\n *     });\r\n *\r\n * @typedef {Object} Defaults\r\n * @property {string} [attribPrefix] The prefix to stick on attributes\r\n *\r\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\r\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\r\n *\r\n *   In other words I'll create arrays of geometry like this\r\n *\r\n *       const arrays = {\r\n *         position: ...\r\n *         normal: ...\r\n *         texcoord: ...\r\n *       };\r\n *\r\n *   But need those mapped to attributes and my attributes start with `a_`.\r\n *\r\n *   Default: `\"\"`\r\n *\r\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\r\n *\r\n *   The default texture color is used when loading textures from\r\n *   urls. Because the URL will be loaded async we'd like to be\r\n *   able to use the texture immediately. By putting a 1x1 pixel\r\n *   color in the texture we can start using the texture before\r\n *   the URL has loaded.\r\n *\r\n *   Default: `[0.5, 0.75, 1, 1]`\r\n *\r\n * @property {string} [crossOrigin]\r\n *\r\n *   If not undefined sets the crossOrigin attribute on images\r\n *   that twgl creates when downloading images for textures.\r\n *\r\n *   Also see {@link module:twgl.TextureOptions}.\r\n *\r\n * @property {bool} [addExtensionsToContext]\r\n *\r\n *   If true, then, when twgl will try to add any supported WebGL extensions\r\n *   directly to the context under their normal GL names. For example\r\n *   if ANGLE_instances_arrays exists then twgl would enable it,\r\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\r\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\r\n *   to the `WebGLRenderingContext`.\r\n *\r\n * @memberOf module:twgl\r\n */\r\n\r\n/**\r\n * Sets various defaults for twgl.\r\n *\r\n * In the interest of terseness which is kind of the point\r\n * of twgl I've integrated a few of the older functions here\r\n *\r\n * @param {module:twgl.Defaults} newDefaults The default settings.\r\n * @memberOf module:twgl\r\n */\r\nfunction setDefaults(newDefaults) {\r\n  copyExistingProperties(newDefaults, defaults);\r\n  setDefaults$2(newDefaults);  // eslint-disable-line\r\n  setDefaults$1(newDefaults);  // eslint-disable-line\r\n}\r\n\r\nconst prefixRE = /^(.*?)_/;\r\nfunction addExtensionToContext(gl, extensionName) {\r\n  glEnumToString(gl, 0);\r\n  const ext = gl.getExtension(extensionName);\r\n  if (ext) {\r\n    const enums = {};\r\n    const fnSuffix = prefixRE.exec(extensionName)[1];\r\n    const enumSuffix = '_' + fnSuffix;\r\n    for (const key in ext) {\r\n      const value = ext[key];\r\n      const isFunc = typeof (value) === 'function';\r\n      const suffix = isFunc ? fnSuffix : enumSuffix;\r\n      let name = key;\r\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\r\n      // and WEBGL_compressed_texture_pvrtc\r\n      if (key.endsWith(suffix)) {\r\n        name = key.substring(0, key.length - suffix.length);\r\n      }\r\n      if (gl[name] !== undefined) {\r\n        if (!isFunc && gl[name] !== value) {\r\n          warn$1(name, gl[name], value, key);\r\n        }\r\n      } else {\r\n        if (isFunc) {\r\n          gl[name] = function(origFn) {\r\n            return function() {\r\n              return origFn.apply(ext, arguments);\r\n            };\r\n          }(value);\r\n        } else {\r\n          gl[name] = value;\r\n          enums[name] = value;\r\n        }\r\n      }\r\n    }\r\n    // pass the modified enums to glEnumToString\r\n    enums.constructor = {\r\n      name: ext.constructor.name,\r\n    };\r\n    glEnumToString(enums, 0);\r\n  }\r\n  return ext;\r\n}\r\n\r\n/*\r\n * If you're wondering why the code doesn't just iterate\r\n * over all extensions using `gl.getExtensions` is that it's possible\r\n * some future extension is incompatible with this code. Rather than\r\n * have thing suddenly break it seems better to manually add to this\r\n * list.\r\n *\r\n */\r\nconst supportedExtensions = [\r\n  'ANGLE_instanced_arrays',\r\n  'EXT_blend_minmax',\r\n  'EXT_color_buffer_float',\r\n  'EXT_color_buffer_half_float',\r\n  'EXT_disjoint_timer_query',\r\n  'EXT_disjoint_timer_query_webgl2',\r\n  'EXT_frag_depth',\r\n  'EXT_sRGB',\r\n  'EXT_shader_texture_lod',\r\n  'EXT_texture_filter_anisotropic',\r\n  'OES_element_index_uint',\r\n  'OES_standard_derivatives',\r\n  'OES_texture_float',\r\n  'OES_texture_float_linear',\r\n  'OES_texture_half_float',\r\n  'OES_texture_half_float_linear',\r\n  'OES_vertex_array_object',\r\n  'WEBGL_color_buffer_float',\r\n  'WEBGL_compressed_texture_atc',\r\n  'WEBGL_compressed_texture_etc1',\r\n  'WEBGL_compressed_texture_pvrtc',\r\n  'WEBGL_compressed_texture_s3tc',\r\n  'WEBGL_compressed_texture_s3tc_srgb',\r\n  'WEBGL_depth_texture',\r\n  'WEBGL_draw_buffers',\r\n];\r\n\r\n/**\r\n * Attempts to enable all of the following extensions\r\n * and add their functions and constants to the\r\n * `WebGLRenderingContext` using their normal non-extension like names.\r\n *\r\n *      ANGLE_instanced_arrays\r\n *      EXT_blend_minmax\r\n *      EXT_color_buffer_float\r\n *      EXT_color_buffer_half_float\r\n *      EXT_disjoint_timer_query\r\n *      EXT_disjoint_timer_query_webgl2\r\n *      EXT_frag_depth\r\n *      EXT_sRGB\r\n *      EXT_shader_texture_lod\r\n *      EXT_texture_filter_anisotropic\r\n *      OES_element_index_uint\r\n *      OES_standard_derivatives\r\n *      OES_texture_float\r\n *      OES_texture_float_linear\r\n *      OES_texture_half_float\r\n *      OES_texture_half_float_linear\r\n *      OES_vertex_array_object\r\n *      WEBGL_color_buffer_float\r\n *      WEBGL_compressed_texture_atc\r\n *      WEBGL_compressed_texture_etc1\r\n *      WEBGL_compressed_texture_pvrtc\r\n *      WEBGL_compressed_texture_s3tc\r\n *      WEBGL_compressed_texture_s3tc_srgb\r\n *      WEBGL_depth_texture\r\n *      WEBGL_draw_buffers\r\n *\r\n * For example if `ANGLE_instanced_arrays` exists then the functions\r\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\r\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\r\n * `WebGLRenderingContext`.\r\n *\r\n * Note that if you want to know if the extension exists you should\r\n * probably call `gl.getExtension` for each extension. Alternatively\r\n * you can check for the existence of the functions or constants that\r\n * are expected to be added. For example\r\n *\r\n *    if (gl.drawBuffers) {\r\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\r\n *      ....\r\n *\r\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\r\n * @memberOf module:twgl\r\n */\r\nfunction addExtensionsToContext(gl) {\r\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\r\n    addExtensionToContext(gl, supportedExtensions[ii]);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a webgl context.\r\n * @param {HTMLCanvasElement} canvas The canvas tag to get\r\n *     context from. If one is not passed in one will be\r\n *     created.\r\n * @return {WebGLRenderingContext} The created context.\r\n * @private\r\n */\r\nfunction create3DContext(canvas, opt_attribs) {\r\n  const names = [\"webgl\", \"experimental-webgl\"];\r\n  let context = null;\r\n  for (let ii = 0; ii < names.length; ++ii) {\r\n    context = canvas.getContext(names[ii], opt_attribs);\r\n    if (context) {\r\n      if (defaults.addExtensionsToContext) {\r\n        addExtensionsToContext(context);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return context;\r\n}\r\n\r\n/**\r\n * Gets a WebGL1 context.\r\n *\r\n * Note: Will attempt to enable Vertex Array Objects\r\n * and add WebGL2 entry points. (unless you first set defaults with\r\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\r\n *\r\n * @param {HTMLCanvasElement} canvas a canvas element.\r\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\r\n * @return {WebGLRenderingContext} The created context.\r\n * @memberOf module:twgl\r\n * @deprecated\r\n * @private\r\n */\r\nfunction getWebGLContext(canvas, opt_attribs) {\r\n  const gl = create3DContext(canvas, opt_attribs);\r\n  return gl;\r\n}\r\n\r\n/**\r\n * Creates a webgl context.\r\n *\r\n * Will return a WebGL2 context if possible.\r\n *\r\n * You can check if it's WebGL2 with\r\n *\r\n *     twgl.isWebGL2(gl);\r\n *\r\n * @param {HTMLCanvasElement} canvas The canvas tag to get\r\n *     context from. If one is not passed in one will be\r\n *     created.\r\n * @return {WebGLRenderingContext} The created context.\r\n */\r\nfunction createContext(canvas, opt_attribs) {\r\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\r\n  let context = null;\r\n  for (let ii = 0; ii < names.length; ++ii) {\r\n    context = canvas.getContext(names[ii], opt_attribs);\r\n    if (context) {\r\n      if (defaults.addExtensionsToContext) {\r\n        addExtensionsToContext(context);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return context;\r\n}\r\n\r\n/**\r\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\r\n *\r\n * You can check if it's WebGL2 with\r\n *\r\n *    function isWebGL2(gl) {\r\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\r\n *    }\r\n *\r\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\r\n * and add WebGL2 entry points. (unless you first set defaults with\r\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\r\n *\r\n * @param {HTMLCanvasElement} canvas a canvas element.\r\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\r\n * @return {WebGLRenderingContext} The created context.\r\n * @memberOf module:twgl\r\n */\r\nfunction getContext(canvas, opt_attribs) {\r\n  const gl = createContext(canvas, opt_attribs);\r\n  return gl;\r\n}\r\n\r\n/**\r\n * Resize a canvas to match the size it's displayed.\r\n * @param {HTMLCanvasElement} canvas The canvas to resize.\r\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\r\n * @return {boolean} true if the canvas was resized.\r\n * @memberOf module:twgl\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\r\n  multiplier = multiplier || 1;\r\n  multiplier = Math.max(0, multiplier);\r\n  const width  = canvas.clientWidth  * multiplier | 0;\r\n  const height = canvas.clientHeight * multiplier | 0;\r\n  if (canvas.width !== width || canvas.height !== height) {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createProgramInfos, createProgramInfosAsync, createPrograms, createProgramsAsync, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer$1 as isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults$2 as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, vertexArrays };\r\n"],
  "mappings": "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",
  "names": ["length", "glEnumToString", "isArrayBuffer", "getShared2DContext", "internalFormat", "clearEventHandlers", "onError", "onLoad", "cb", "img", "textures", "location", "typeInfo", "error", "gl", "program", "programs", "token", "node", "errors"]
}
